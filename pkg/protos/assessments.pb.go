// This file contains the proto definition for communicating with the Databricks tracing server.
// The message definition should be kept in (mostly) sync with the MLflow service definition.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.26.0
// source: assessments.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of the assessment source.
type AssessmentSource_SourceType int32

const (
	AssessmentSource_SOURCE_TYPE_UNSPECIFIED AssessmentSource_SourceType = 0
	// Assessment from a human.
	AssessmentSource_HUMAN AssessmentSource_SourceType = 1
	// Assessment from an LLM Judge.
	AssessmentSource_LLM_JUDGE AssessmentSource_SourceType = 2
	// Code-based assessment, (e.g. Python UDF).
	AssessmentSource_CODE AssessmentSource_SourceType = 3
)

// Enum value maps for AssessmentSource_SourceType.
var (
	AssessmentSource_SourceType_name = map[int32]string{
		0: "SOURCE_TYPE_UNSPECIFIED",
		1: "HUMAN",
		2: "LLM_JUDGE",
		3: "CODE",
	}
	AssessmentSource_SourceType_value = map[string]int32{
		"SOURCE_TYPE_UNSPECIFIED": 0,
		"HUMAN":                   1,
		"LLM_JUDGE":               2,
		"CODE":                    3,
	}
)

func (x AssessmentSource_SourceType) Enum() *AssessmentSource_SourceType {
	p := new(AssessmentSource_SourceType)
	*p = x
	return p
}

func (x AssessmentSource_SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssessmentSource_SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_assessments_proto_enumTypes[0].Descriptor()
}

func (AssessmentSource_SourceType) Type() protoreflect.EnumType {
	return &file_assessments_proto_enumTypes[0]
}

func (x AssessmentSource_SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AssessmentSource_SourceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AssessmentSource_SourceType(num)
	return nil
}

// Deprecated: Use AssessmentSource_SourceType.Descriptor instead.
func (AssessmentSource_SourceType) EnumDescriptor() ([]byte, []int) {
	return file_assessments_proto_rawDescGZIP(), []int{0, 0}
}

type AssessmentSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the source.
	SourceType *AssessmentSource_SourceType `protobuf:"varint,1,opt,name=source_type,json=sourceType,enum=mlflow.assessments.AssessmentSource_SourceType" json:"source_type,omitempty" query:"source_type" params:"source_type"`
	// Identifier for the source.
	// Example: For human -> user name; for LLM judge -> judge source (databricks or custom); for code -> empty.
	SourceId *string `protobuf:"bytes,2,opt,name=source_id,json=sourceId" json:"source_id,omitempty" query:"source_id" params:"source_id"`
}

func (x *AssessmentSource) Reset() {
	*x = AssessmentSource{}
	mi := &file_assessments_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssessmentSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssessmentSource) ProtoMessage() {}

func (x *AssessmentSource) ProtoReflect() protoreflect.Message {
	mi := &file_assessments_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssessmentSource.ProtoReflect.Descriptor instead.
func (*AssessmentSource) Descriptor() ([]byte, []int) {
	return file_assessments_proto_rawDescGZIP(), []int{0}
}

func (x *AssessmentSource) GetSourceType() AssessmentSource_SourceType {
	if x != nil && x.SourceType != nil {
		return *x.SourceType
	}
	return AssessmentSource_SOURCE_TYPE_UNSPECIFIED
}

func (x *AssessmentSource) GetSourceId() string {
	if x != nil && x.SourceId != nil {
		return *x.SourceId
	}
	return ""
}

type AssessmentError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value of an assessment when an error has occurred.
	ErrorCode    *string `protobuf:"bytes,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty" query:"error_code" params:"error_code"`
	ErrorMessage *string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty" query:"error_message" params:"error_message"`
	// Stack trace of the error. Truncated to 1000 characters to avoid making TraceInfo too large.
	StackTrace *string `protobuf:"bytes,3,opt,name=stack_trace,json=stackTrace" json:"stack_trace,omitempty" query:"stack_trace" params:"stack_trace"`
}

func (x *AssessmentError) Reset() {
	*x = AssessmentError{}
	mi := &file_assessments_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssessmentError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssessmentError) ProtoMessage() {}

func (x *AssessmentError) ProtoReflect() protoreflect.Message {
	mi := &file_assessments_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssessmentError.ProtoReflect.Descriptor instead.
func (*AssessmentError) Descriptor() ([]byte, []int) {
	return file_assessments_proto_rawDescGZIP(), []int{1}
}

func (x *AssessmentError) GetErrorCode() string {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return ""
}

func (x *AssessmentError) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *AssessmentError) GetStackTrace() string {
	if x != nil && x.StackTrace != nil {
		return *x.StackTrace
	}
	return ""
}

// An expectation for the values or guidelines for the outputs that a model or agent should produce
// from the inputs contained in the trace.
type Expectation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value of the expectation-based assessment. This uses “google.protobuf.Value“ under the hood to support a
	// flexible schema of expectation values but is validated to constrain it to specific types. This means the value must
	// be JSON conforming to one of the following supported types:
	// * Numeric values like integers or floats
	// * Boolean values
	// * Text value (can contain JSON text the user wishes to store, but it will only be searchable as text)
	// * List values containing only strings (empty lists allowed).
	//
	// Other values like null, structs, non-string lists etc. will be rejected. However, they can instead be serialized as
	// a string and stored in the “serialized_value“ field instead. Only one of either “serialized_value“ or “value“
	// may be defined. We do not support these other formats directly despite using google.protobuf.Value due to security
	// risks around their serialization and deserialization.
	Value *structpb.Value `protobuf:"bytes,2,opt,name=value" json:"value,omitempty" query:"value" params:"value"`
	// The value of the expecation-based assessment serialized as a string in a specified format. Only one of either
	// “serialized_value“ or “value“ may be defined.
	SerializedValue *Expectation_SerializedValue `protobuf:"bytes,3,opt,name=serialized_value,json=serializedValue" json:"serialized_value,omitempty" query:"serialized_value" params:"serialized_value"`
}

func (x *Expectation) Reset() {
	*x = Expectation{}
	mi := &file_assessments_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expectation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expectation) ProtoMessage() {}

func (x *Expectation) ProtoReflect() protoreflect.Message {
	mi := &file_assessments_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expectation.ProtoReflect.Descriptor instead.
func (*Expectation) Descriptor() ([]byte, []int) {
	return file_assessments_proto_rawDescGZIP(), []int{2}
}

func (x *Expectation) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Expectation) GetSerializedValue() *Expectation_SerializedValue {
	if x != nil {
		return x.SerializedValue
	}
	return nil
}

// Feedback provided on the model / agent output(s) contained in the trace
type Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value of the feedback-based assessment.
	// We use google.protobuf.Value to support a flexible schema of feedback values.
	// Supported initial types:
	// - Numeric values like integers or floats
	// - Boolean values
	// - Text value (can contain json text the user wishes to store, but it will only be searchable as text)
	// - Non-empty list values containing only strings
	// - Other values like structs, non-string lists etc. will be rejected for now
	Value *structpb.Value `protobuf:"bytes,2,opt,name=value" json:"value,omitempty" query:"value" params:"value"`
	// An error encountered while generating the feedback. Required if value is set to null.
	Error *AssessmentError `protobuf:"bytes,3,opt,name=error" json:"error,omitempty" query:"error" params:"error"`
}

func (x *Feedback) Reset() {
	*x = Feedback{}
	mi := &file_assessments_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feedback) ProtoMessage() {}

func (x *Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_assessments_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feedback.ProtoReflect.Descriptor instead.
func (*Feedback) Descriptor() ([]byte, []int) {
	return file_assessments_proto_rawDescGZIP(), []int{3}
}

func (x *Feedback) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Feedback) GetError() *AssessmentError {
	if x != nil {
		return x.Error
	}
	return nil
}

// Data and metadata for an assessment of a trace.
type Assessment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the assessment.
	// NB: This is not marked as required field via "validate_required", because the message is
	//
	//	used in the context of creating a new assessment, where the ID is not known.
	AssessmentId *string `protobuf:"bytes,1,opt,name=assessment_id,json=assessmentId" json:"assessment_id,omitempty" query:"assessment_id" params:"assessment_id"`
	// Name of the assessment. The name must not contain ".".
	AssessmentName *string `protobuf:"bytes,2,opt,name=assessment_name,json=assessmentName" json:"assessment_name,omitempty" query:"assessment_name" params:"assessment_name"`
	// ID of the trace this assessment is associated with.
	TraceId *string `protobuf:"bytes,3,opt,name=trace_id,json=traceId" json:"trace_id,omitempty" query:"trace_id" params:"trace_id"`
	// ID of the span if the assessment is for a particular span (optional).
	SpanId *string `protobuf:"bytes,4,opt,name=span_id,json=spanId" json:"span_id,omitempty" query:"span_id" params:"span_id"`
	// The source this assessment came from.
	Source *AssessmentSource `protobuf:"bytes,5,opt,name=source" json:"source,omitempty" query:"source" params:"source"`
	// The creation time of this assessment.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime" json:"create_time,omitempty" query:"create_time" params:"create_time"`
	// The last update time of this assessment.
	LastUpdateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_update_time,json=lastUpdateTime" json:"last_update_time,omitempty" query:"last_update_time" params:"last_update_time"`
	// An Assessment can either be human/code/judge Feedback, human-generated Expectation, or an error.
	// The name of the Feedback or Expectation must be the same with the assessment_name.
	//
	// Types that are assignable to Value:
	//
	//	*Assessment_Feedback
	//	*Assessment_Expectation
	Value isAssessment_Value `protobuf_oneof:"value"`
	// Justification for the assessment.
	Rationale *string `protobuf:"bytes,11,opt,name=rationale" json:"rationale,omitempty" query:"rationale" params:"rationale"`
	// [Deprecated, use the “error“ field in “feedback“ instead]
	// An error encountered while computing the assessment.
	//
	// Deprecated: Marked as deprecated in assessments.proto.
	Error *AssessmentError `protobuf:"bytes,12,opt,name=error" json:"error,omitempty" query:"error" params:"error"`
	// Additional metadata describing the assessment and store additional information,
	// such as the chunk relevance chunk_index. This metadata is required to be JSON-serializable.
	Metadata map[string]string `protobuf:"bytes,13,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" query:"metadata" params:"metadata"`
}

func (x *Assessment) Reset() {
	*x = Assessment{}
	mi := &file_assessments_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Assessment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assessment) ProtoMessage() {}

func (x *Assessment) ProtoReflect() protoreflect.Message {
	mi := &file_assessments_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assessment.ProtoReflect.Descriptor instead.
func (*Assessment) Descriptor() ([]byte, []int) {
	return file_assessments_proto_rawDescGZIP(), []int{4}
}

func (x *Assessment) GetAssessmentId() string {
	if x != nil && x.AssessmentId != nil {
		return *x.AssessmentId
	}
	return ""
}

func (x *Assessment) GetAssessmentName() string {
	if x != nil && x.AssessmentName != nil {
		return *x.AssessmentName
	}
	return ""
}

func (x *Assessment) GetTraceId() string {
	if x != nil && x.TraceId != nil {
		return *x.TraceId
	}
	return ""
}

func (x *Assessment) GetSpanId() string {
	if x != nil && x.SpanId != nil {
		return *x.SpanId
	}
	return ""
}

func (x *Assessment) GetSource() *AssessmentSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Assessment) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Assessment) GetLastUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdateTime
	}
	return nil
}

func (m *Assessment) GetValue() isAssessment_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Assessment) GetFeedback() *Feedback {
	if x, ok := x.GetValue().(*Assessment_Feedback); ok {
		return x.Feedback
	}
	return nil
}

func (x *Assessment) GetExpectation() *Expectation {
	if x, ok := x.GetValue().(*Assessment_Expectation); ok {
		return x.Expectation
	}
	return nil
}

func (x *Assessment) GetRationale() string {
	if x != nil && x.Rationale != nil {
		return *x.Rationale
	}
	return ""
}

// Deprecated: Marked as deprecated in assessments.proto.
func (x *Assessment) GetError() *AssessmentError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Assessment) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type isAssessment_Value interface {
	isAssessment_Value()
}

type Assessment_Feedback struct {
	// The feedback on the trace from this assessment.
	Feedback *Feedback `protobuf:"bytes,9,opt,name=feedback,oneof"`
}

type Assessment_Expectation struct {
	// A representation of the guidelines and/or expected response from the agent.
	Expectation *Expectation `protobuf:"bytes,10,opt,name=expectation,oneof"`
}

func (*Assessment_Feedback) isAssessment_Value() {}

func (*Assessment_Expectation) isAssessment_Value() {}

type Expectation_SerializedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Marks the serialization format for the expectation value. This is a contract specific to the client. The service
	// will not attempt to deserialize the value or validate the format. An example format is "JSON_FORMAT".
	SerializationFormat *string `protobuf:"bytes,1,opt,name=serialization_format,json=serializationFormat" json:"serialization_format,omitempty" query:"serialization_format" params:"serialization_format"`
	// The value of the expectation-based assessment serialized as a string in the format defined by “serialization_format“.
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty" query:"value" params:"value"`
}

func (x *Expectation_SerializedValue) Reset() {
	*x = Expectation_SerializedValue{}
	mi := &file_assessments_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expectation_SerializedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expectation_SerializedValue) ProtoMessage() {}

func (x *Expectation_SerializedValue) ProtoReflect() protoreflect.Message {
	mi := &file_assessments_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expectation_SerializedValue.ProtoReflect.Descriptor instead.
func (*Expectation_SerializedValue) Descriptor() ([]byte, []int) {
	return file_assessments_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Expectation_SerializedValue) GetSerializationFormat() string {
	if x != nil && x.SerializationFormat != nil {
		return *x.SerializationFormat
	}
	return ""
}

func (x *Expectation_SerializedValue) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

var File_assessments_proto protoreflect.FileDescriptor

var file_assessments_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x01, 0x0a, 0x10, 0x41, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x56, 0x0a,
	0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x08,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x55, 0x4d, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x4c, 0x4c, 0x4d, 0x5f, 0x4a, 0x55, 0x44, 0x47, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x22, 0x76, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x22,
	0xf3, 0x01, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5a, 0x0a,
	0x10, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x5a, 0x0a, 0x0f, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x14,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x73, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x39, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xc3, 0x05, 0x0a, 0x0a, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x0e, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x43,
	0x0a, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x65, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x48, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x19, 0x0a, 0x14, 0x6f, 0x72, 0x67, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x90, 0x01, 0x01,
}

var (
	file_assessments_proto_rawDescOnce sync.Once
	file_assessments_proto_rawDescData = file_assessments_proto_rawDesc
)

func file_assessments_proto_rawDescGZIP() []byte {
	file_assessments_proto_rawDescOnce.Do(func() {
		file_assessments_proto_rawDescData = protoimpl.X.CompressGZIP(file_assessments_proto_rawDescData)
	})
	return file_assessments_proto_rawDescData
}

var file_assessments_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_assessments_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_assessments_proto_goTypes = []any{
	(AssessmentSource_SourceType)(0),    // 0: mlflow.assessments.AssessmentSource.SourceType
	(*AssessmentSource)(nil),            // 1: mlflow.assessments.AssessmentSource
	(*AssessmentError)(nil),             // 2: mlflow.assessments.AssessmentError
	(*Expectation)(nil),                 // 3: mlflow.assessments.Expectation
	(*Feedback)(nil),                    // 4: mlflow.assessments.Feedback
	(*Assessment)(nil),                  // 5: mlflow.assessments.Assessment
	(*Expectation_SerializedValue)(nil), // 6: mlflow.assessments.Expectation.SerializedValue
	nil,                                 // 7: mlflow.assessments.Assessment.MetadataEntry
	(*structpb.Value)(nil),              // 8: google.protobuf.Value
	(*timestamppb.Timestamp)(nil),       // 9: google.protobuf.Timestamp
}
var file_assessments_proto_depIdxs = []int32{
	0,  // 0: mlflow.assessments.AssessmentSource.source_type:type_name -> mlflow.assessments.AssessmentSource.SourceType
	8,  // 1: mlflow.assessments.Expectation.value:type_name -> google.protobuf.Value
	6,  // 2: mlflow.assessments.Expectation.serialized_value:type_name -> mlflow.assessments.Expectation.SerializedValue
	8,  // 3: mlflow.assessments.Feedback.value:type_name -> google.protobuf.Value
	2,  // 4: mlflow.assessments.Feedback.error:type_name -> mlflow.assessments.AssessmentError
	1,  // 5: mlflow.assessments.Assessment.source:type_name -> mlflow.assessments.AssessmentSource
	9,  // 6: mlflow.assessments.Assessment.create_time:type_name -> google.protobuf.Timestamp
	9,  // 7: mlflow.assessments.Assessment.last_update_time:type_name -> google.protobuf.Timestamp
	4,  // 8: mlflow.assessments.Assessment.feedback:type_name -> mlflow.assessments.Feedback
	3,  // 9: mlflow.assessments.Assessment.expectation:type_name -> mlflow.assessments.Expectation
	2,  // 10: mlflow.assessments.Assessment.error:type_name -> mlflow.assessments.AssessmentError
	7,  // 11: mlflow.assessments.Assessment.metadata:type_name -> mlflow.assessments.Assessment.MetadataEntry
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_assessments_proto_init() }
func file_assessments_proto_init() {
	if File_assessments_proto != nil {
		return
	}
	file_databricks_proto_init()
	file_assessments_proto_msgTypes[4].OneofWrappers = []any{
		(*Assessment_Feedback)(nil),
		(*Assessment_Expectation)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_assessments_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_assessments_proto_goTypes,
		DependencyIndexes: file_assessments_proto_depIdxs,
		EnumInfos:         file_assessments_proto_enumTypes,
		MessageInfos:      file_assessments_proto_msgTypes,
	}.Build()
	File_assessments_proto = out.File
	file_assessments_proto_rawDesc = nil
	file_assessments_proto_goTypes = nil
	file_assessments_proto_depIdxs = nil
}
