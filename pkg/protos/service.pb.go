// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.26.0
// source: service.proto

package protos

import (
	_ "github.com/mlflow/mlflow-go-backend/pkg/protos/scalapb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// View type for ListExperiments query.
type ViewType int32

const (
	// Default. Return only active experiments.
	ViewType_ACTIVE_ONLY ViewType = 1
	// Return only deleted experiments.
	ViewType_DELETED_ONLY ViewType = 2
	// Get all experiments.
	ViewType_ALL ViewType = 3
)

// Enum value maps for ViewType.
var (
	ViewType_name = map[int32]string{
		1: "ACTIVE_ONLY",
		2: "DELETED_ONLY",
		3: "ALL",
	}
	ViewType_value = map[string]int32{
		"ACTIVE_ONLY":  1,
		"DELETED_ONLY": 2,
		"ALL":          3,
	}
)

func (x ViewType) Enum() *ViewType {
	p := new(ViewType)
	*p = x
	return p
}

func (x ViewType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[0].Descriptor()
}

func (ViewType) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[0]
}

func (x ViewType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ViewType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ViewType(num)
	return nil
}

// Deprecated: Use ViewType.Descriptor instead.
func (ViewType) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

// Source that generated a run.
type SourceType int32

const (
	// Databricks notebook environment.
	SourceType_NOTEBOOK SourceType = 1
	// Scheduled or Run Now job.
	SourceType_JOB SourceType = 2
	// As a prepackaged project: either a Docker image or GitHub source, etc.
	SourceType_PROJECT SourceType = 3
	// Local run: Using CLI, IDE, or local notebook.
	SourceType_LOCAL SourceType = 4
	// Unknown source type.
	SourceType_UNKNOWN SourceType = 1000
)

// Enum value maps for SourceType.
var (
	SourceType_name = map[int32]string{
		1:    "NOTEBOOK",
		2:    "JOB",
		3:    "PROJECT",
		4:    "LOCAL",
		1000: "UNKNOWN",
	}
	SourceType_value = map[string]int32{
		"NOTEBOOK": 1,
		"JOB":      2,
		"PROJECT":  3,
		"LOCAL":    4,
		"UNKNOWN":  1000,
	}
)

func (x SourceType) Enum() *SourceType {
	p := new(SourceType)
	*p = x
	return p
}

func (x SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[1].Descriptor()
}

func (SourceType) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[1]
}

func (x SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SourceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SourceType(num)
	return nil
}

// Deprecated: Use SourceType.Descriptor instead.
func (SourceType) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

// Status of a run.
type RunStatus int32

const (
	// Run has been initiated.
	RunStatus_RUNNING RunStatus = 1
	// Run is scheduled to run at a later time.
	RunStatus_SCHEDULED RunStatus = 2
	// Run has completed.
	RunStatus_FINISHED RunStatus = 3
	// Run execution failed.
	RunStatus_FAILED RunStatus = 4
	// Run killed by user.
	RunStatus_KILLED RunStatus = 5
)

// Enum value maps for RunStatus.
var (
	RunStatus_name = map[int32]string{
		1: "RUNNING",
		2: "SCHEDULED",
		3: "FINISHED",
		4: "FAILED",
		5: "KILLED",
	}
	RunStatus_value = map[string]int32{
		"RUNNING":   1,
		"SCHEDULED": 2,
		"FINISHED":  3,
		"FAILED":    4,
		"KILLED":    5,
	}
)

func (x RunStatus) Enum() *RunStatus {
	p := new(RunStatus)
	*p = x
	return p
}

func (x RunStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[2].Descriptor()
}

func (RunStatus) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[2]
}

func (x RunStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RunStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RunStatus(num)
	return nil
}

// Deprecated: Use RunStatus.Descriptor instead.
func (RunStatus) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

type TraceStatus int32

const (
	TraceStatus_TRACE_STATUS_UNSPECIFIED TraceStatus = 0
	// The operation being traced was successful.
	TraceStatus_OK TraceStatus = 1
	// The operation being traced failed.
	TraceStatus_ERROR TraceStatus = 2
	// The operation being traced is still in progress.
	TraceStatus_IN_PROGRESS TraceStatus = 3
)

// Enum value maps for TraceStatus.
var (
	TraceStatus_name = map[int32]string{
		0: "TRACE_STATUS_UNSPECIFIED",
		1: "OK",
		2: "ERROR",
		3: "IN_PROGRESS",
	}
	TraceStatus_value = map[string]int32{
		"TRACE_STATUS_UNSPECIFIED": 0,
		"OK":                       1,
		"ERROR":                    2,
		"IN_PROGRESS":              3,
	}
)

func (x TraceStatus) Enum() *TraceStatus {
	p := new(TraceStatus)
	*p = x
	return p
}

func (x TraceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TraceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[3].Descriptor()
}

func (TraceStatus) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[3]
}

func (x TraceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TraceStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TraceStatus(num)
	return nil
}

// Deprecated: Use TraceStatus.Descriptor instead.
func (TraceStatus) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

// A LoggedModelStatus enum value represents the status of a logged
// model.
type LoggedModelStatus int32

const (
	LoggedModelStatus_LOGGED_MODEL_STATUS_UNSPECIFIED LoggedModelStatus = 0
	// The LoggedModel has been created, but the LoggedModel files are not
	// completely uploaded.
	LoggedModelStatus_LOGGED_MODEL_PENDING LoggedModelStatus = 1
	// The LoggedModel is created, and the LoggedModel files are completely uploaded.
	LoggedModelStatus_LOGGED_MODEL_READY LoggedModelStatus = 2
	// The LoggedModel is created, but an error occurred when uploading the
	// LoggedModel files such as model weights / agent code.
	LoggedModelStatus_LOGGED_MODEL_UPLOAD_FAILED LoggedModelStatus = 3
)

// Enum value maps for LoggedModelStatus.
var (
	LoggedModelStatus_name = map[int32]string{
		0: "LOGGED_MODEL_STATUS_UNSPECIFIED",
		1: "LOGGED_MODEL_PENDING",
		2: "LOGGED_MODEL_READY",
		3: "LOGGED_MODEL_UPLOAD_FAILED",
	}
	LoggedModelStatus_value = map[string]int32{
		"LOGGED_MODEL_STATUS_UNSPECIFIED": 0,
		"LOGGED_MODEL_PENDING":            1,
		"LOGGED_MODEL_READY":              2,
		"LOGGED_MODEL_UPLOAD_FAILED":      3,
	}
)

func (x LoggedModelStatus) Enum() *LoggedModelStatus {
	p := new(LoggedModelStatus)
	*p = x
	return p
}

func (x LoggedModelStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoggedModelStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[4].Descriptor()
}

func (LoggedModelStatus) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[4]
}

func (x LoggedModelStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LoggedModelStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LoggedModelStatus(num)
	return nil
}

// Deprecated: Use LoggedModelStatus.Descriptor instead.
func (LoggedModelStatus) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4}
}

// Type of the assessment source.
type TraceLocation_TraceLocationType int32

const (
	TraceLocation_TRACE_LOCATION_TYPE_UNSPECIFIED TraceLocation_TraceLocationType = 0
	TraceLocation_MLFLOW_EXPERIMENT               TraceLocation_TraceLocationType = 1
	TraceLocation_INFERENCE_TABLE                 TraceLocation_TraceLocationType = 2
)

// Enum value maps for TraceLocation_TraceLocationType.
var (
	TraceLocation_TraceLocationType_name = map[int32]string{
		0: "TRACE_LOCATION_TYPE_UNSPECIFIED",
		1: "MLFLOW_EXPERIMENT",
		2: "INFERENCE_TABLE",
	}
	TraceLocation_TraceLocationType_value = map[string]int32{
		"TRACE_LOCATION_TYPE_UNSPECIFIED": 0,
		"MLFLOW_EXPERIMENT":               1,
		"INFERENCE_TABLE":                 2,
	}
)

func (x TraceLocation_TraceLocationType) Enum() *TraceLocation_TraceLocationType {
	p := new(TraceLocation_TraceLocationType)
	*p = x
	return p
}

func (x TraceLocation_TraceLocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TraceLocation_TraceLocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[6].Descriptor()
}

func (TraceLocation_TraceLocationType) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[6]
}

func (x TraceLocation_TraceLocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TraceLocation_TraceLocationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TraceLocation_TraceLocationType(num)
	return nil
}

// Deprecated: Use TraceLocation_TraceLocationType.Descriptor instead.
func (TraceLocation_TraceLocationType) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{61, 0}
}

// Execution state of the trace at the time that it was logged.
type TraceInfoV3_State int32

const (
	TraceInfoV3_STATE_UNSPECIFIED TraceInfoV3_State = 0
	// The operation being traced was successful.
	TraceInfoV3_OK TraceInfoV3_State = 1
	// The operation being traced failed.
	TraceInfoV3_ERROR TraceInfoV3_State = 2
	// The operation being traced is still in progress. This is useful for incremental/distributed tracing logging in
	// contrast with when the full trace is logged only upon its completion.
	TraceInfoV3_IN_PROGRESS TraceInfoV3_State = 3
)

// Enum value maps for TraceInfoV3_State.
var (
	TraceInfoV3_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "OK",
		2: "ERROR",
		3: "IN_PROGRESS",
	}
	TraceInfoV3_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"OK":                1,
		"ERROR":             2,
		"IN_PROGRESS":       3,
	}
)

func (x TraceInfoV3_State) Enum() *TraceInfoV3_State {
	p := new(TraceInfoV3_State)
	*p = x
	return p
}

func (x TraceInfoV3_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TraceInfoV3_State) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[7].Descriptor()
}

func (TraceInfoV3_State) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[7]
}

func (x TraceInfoV3_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TraceInfoV3_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TraceInfoV3_State(num)
	return nil
}

// Deprecated: Use TraceInfoV3_State.Descriptor instead.
func (TraceInfoV3_State) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{62, 0}
}

// Metric associated with a run, represented as a key-value pair.
type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key identifying this metric.
	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty" query:"key" params:"key" validate:"required,max=250,validMetricParamOrTagName,pathIsUnique"`
	// Value associated with this metric.
	Value *float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty" query:"value" params:"value" validate:"required"`
	// The timestamp at which this metric was recorded.
	Timestamp *int64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty" query:"timestamp" params:"timestamp" validate:"required"`
	// Step at which to log the metric.
	Step *int64 `protobuf:"varint,4,opt,name=step,def=0" json:"step,omitempty" query:"step" params:"step"`
	// The name of the dataset associated with the metric.
	// E.g. “my.uc.table@2” “nyc-taxi-dataset”, “fantastic-elk-3”
	DatasetName *string `protobuf:"bytes,5,opt,name=dataset_name,json=datasetName" json:"dataset_name,omitempty" query:"dataset_name" params:"dataset_name"`
	// Dataset digest of the dataset associated with the metric,
	// e.g. an md5 hash of the dataset that uniquely identifies it
	// within datasets of the same name.
	DatasetDigest *string `protobuf:"bytes,6,opt,name=dataset_digest,json=datasetDigest" json:"dataset_digest,omitempty" query:"dataset_digest" params:"dataset_digest"`
	// The ID of the LoggedModel or Registered Model Version associated with
	// the metric, if applicable.
	ModelId *string `protobuf:"bytes,7,opt,name=model_id,json=modelId" json:"model_id,omitempty" query:"model_id" params:"model_id"`
	// The ID of the run containing the metric.
	RunId *string `protobuf:"bytes,8,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id" params:"run_id"`
}

// Default values for Metric fields.
const (
	Default_Metric_Step = int64(0)
)

func (x *Metric) Reset() {
	*x = Metric{}
	mi := &file_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

func (x *Metric) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Metric) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *Metric) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *Metric) GetStep() int64 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return Default_Metric_Step
}

func (x *Metric) GetDatasetName() string {
	if x != nil && x.DatasetName != nil {
		return *x.DatasetName
	}
	return ""
}

func (x *Metric) GetDatasetDigest() string {
	if x != nil && x.DatasetDigest != nil {
		return *x.DatasetDigest
	}
	return ""
}

func (x *Metric) GetModelId() string {
	if x != nil && x.ModelId != nil {
		return *x.ModelId
	}
	return ""
}

func (x *Metric) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

// Param associated with a run.
type Param struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key identifying this param.
	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty" query:"key" params:"key" validate:"required,max=250,validMetricParamOrTagName,pathIsUnique"`
	// Value associated with this param.
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty" query:"value" params:"value" validate:"omitempty,truncate=6000"`
}

func (x *Param) Reset() {
	*x = Param{}
	mi := &file_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Param) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Param) ProtoMessage() {}

func (x *Param) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Param.ProtoReflect.Descriptor instead.
func (*Param) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

func (x *Param) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Param) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// A single run.
type Run struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Run metadata.
	Info *RunInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty" query:"info" params:"info"`
	// Run data.
	Data *RunData `protobuf:"bytes,2,opt,name=data" json:"data,omitempty" query:"data" params:"data"`
	// Run inputs.
	Inputs *RunInputs `protobuf:"bytes,3,opt,name=inputs" json:"inputs,omitempty" query:"inputs" params:"inputs"`
	// Run outputs.
	Outputs *RunOutputs `protobuf:"bytes,4,opt,name=outputs" json:"outputs,omitempty" query:"outputs" params:"outputs"`
}

func (x *Run) Reset() {
	*x = Run{}
	mi := &file_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Run) ProtoMessage() {}

func (x *Run) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Run.ProtoReflect.Descriptor instead.
func (*Run) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

func (x *Run) GetInfo() *RunInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Run) GetData() *RunData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Run) GetInputs() *RunInputs {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Run) GetOutputs() *RunOutputs {
	if x != nil {
		return x.Outputs
	}
	return nil
}

// Run data (metrics, params, and tags).
type RunData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Run metrics.
	Metrics []*Metric `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty" query:"metrics" params:"metrics"`
	// Run parameters.
	Params []*Param `protobuf:"bytes,2,rep,name=params" json:"params,omitempty" query:"params" params:"params"`
	// Additional metadata key-value pairs.
	Tags []*RunTag `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty" query:"tags" params:"tags"`
}

func (x *RunData) Reset() {
	*x = RunData{}
	mi := &file_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunData) ProtoMessage() {}

func (x *RunData) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunData.ProtoReflect.Descriptor instead.
func (*RunData) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

func (x *RunData) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *RunData) GetParams() []*Param {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *RunData) GetTags() []*RunTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Run inputs.
type RunInputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Dataset inputs to the Run.
	DatasetInputs []*DatasetInput `protobuf:"bytes,1,rep,name=dataset_inputs,json=datasetInputs" json:"dataset_inputs,omitempty" query:"dataset_inputs" params:"dataset_inputs"`
	// Model inputs to the Run.
	ModelInputs []*ModelInput `protobuf:"bytes,2,rep,name=model_inputs,json=modelInputs" json:"model_inputs,omitempty" query:"model_inputs" params:"model_inputs"`
}

func (x *RunInputs) Reset() {
	*x = RunInputs{}
	mi := &file_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunInputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunInputs) ProtoMessage() {}

func (x *RunInputs) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunInputs.ProtoReflect.Descriptor instead.
func (*RunInputs) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4}
}

func (x *RunInputs) GetDatasetInputs() []*DatasetInput {
	if x != nil {
		return x.DatasetInputs
	}
	return nil
}

func (x *RunInputs) GetModelInputs() []*ModelInput {
	if x != nil {
		return x.ModelInputs
	}
	return nil
}

// Outputs of a Run.
type RunOutputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Model outputs of the Run.
	ModelOutputs []*ModelOutput `protobuf:"bytes,1,rep,name=model_outputs,json=modelOutputs" json:"model_outputs,omitempty" query:"model_outputs" params:"model_outputs"`
}

func (x *RunOutputs) Reset() {
	*x = RunOutputs{}
	mi := &file_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunOutputs) ProtoMessage() {}

func (x *RunOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunOutputs.ProtoReflect.Descriptor instead.
func (*RunOutputs) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{5}
}

func (x *RunOutputs) GetModelOutputs() []*ModelOutput {
	if x != nil {
		return x.ModelOutputs
	}
	return nil
}

// Tag for a run.
type RunTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tag key.
	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty" query:"key" params:"key" validate:"required,max=250,validMetricParamOrTagName,pathIsUnique"`
	// The tag value.
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty" query:"value" params:"value" validate:"omitempty,max=5000"`
}

func (x *RunTag) Reset() {
	*x = RunTag{}
	mi := &file_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunTag) ProtoMessage() {}

func (x *RunTag) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunTag.ProtoReflect.Descriptor instead.
func (*RunTag) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{6}
}

func (x *RunTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *RunTag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// Tag for an experiment.
type ExperimentTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tag key.
	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty" query:"key" params:"key"`
	// The tag value.
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty" query:"value" params:"value"`
}

func (x *ExperimentTag) Reset() {
	*x = ExperimentTag{}
	mi := &file_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExperimentTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentTag) ProtoMessage() {}

func (x *ExperimentTag) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentTag.ProtoReflect.Descriptor instead.
func (*ExperimentTag) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{7}
}

func (x *ExperimentTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *ExperimentTag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// Metadata of a single run.
type RunInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the run.
	RunId *string `protobuf:"bytes,15,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id" params:"run_id"`
	// [Deprecated, use run_id instead] Unique identifier for the run. This field will
	// be removed in a future MLflow version.
	RunUuid *string `protobuf:"bytes,1,opt,name=run_uuid,json=runUuid" json:"run_uuid,omitempty" query:"run_uuid" params:"run_uuid"`
	// The name of the run.
	RunName *string `protobuf:"bytes,3,opt,name=run_name,json=runName" json:"run_name,omitempty" query:"run_name" params:"run_name"`
	// The experiment ID.
	ExperimentId *string `protobuf:"bytes,2,opt,name=experiment_id,json=experimentId" json:"experiment_id,omitempty" query:"experiment_id" params:"experiment_id"`
	// User who initiated the run.
	// This field is deprecated as of MLflow 1.0, and will be removed in a future
	// MLflow release. Use 'mlflow.user' tag instead.
	UserId *string `protobuf:"bytes,6,opt,name=user_id,json=userId" json:"user_id,omitempty" query:"user_id" params:"user_id"`
	// Current status of the run.
	Status *RunStatus `protobuf:"varint,7,opt,name=status,enum=mlflow.RunStatus" json:"status,omitempty" query:"status" params:"status"`
	// Unix timestamp of when the run started in milliseconds.
	StartTime *int64 `protobuf:"varint,8,opt,name=start_time,json=startTime" json:"start_time,omitempty" query:"start_time" params:"start_time"`
	// Unix timestamp of when the run ended in milliseconds.
	EndTime *int64 `protobuf:"varint,9,opt,name=end_time,json=endTime" json:"end_time,omitempty" query:"end_time" params:"end_time"`
	// URI of the directory where artifacts should be uploaded.
	// This can be a local path (starting with "/"), or a distributed file system (DFS)
	// path, like “s3://bucket/directory“ or “dbfs:/my/directory“.
	// If not set, the local “./mlruns“ directory is  chosen.
	ArtifactUri *string `protobuf:"bytes,13,opt,name=artifact_uri,json=artifactUri" json:"artifact_uri,omitempty" query:"artifact_uri" params:"artifact_uri"`
	// Current life cycle stage of the experiment : OneOf("active", "deleted")
	LifecycleStage *string `protobuf:"bytes,14,opt,name=lifecycle_stage,json=lifecycleStage" json:"lifecycle_stage,omitempty" query:"lifecycle_stage" params:"lifecycle_stage"`
}

func (x *RunInfo) Reset() {
	*x = RunInfo{}
	mi := &file_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunInfo) ProtoMessage() {}

func (x *RunInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunInfo.ProtoReflect.Descriptor instead.
func (*RunInfo) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{8}
}

func (x *RunInfo) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *RunInfo) GetRunUuid() string {
	if x != nil && x.RunUuid != nil {
		return *x.RunUuid
	}
	return ""
}

func (x *RunInfo) GetRunName() string {
	if x != nil && x.RunName != nil {
		return *x.RunName
	}
	return ""
}

func (x *RunInfo) GetExperimentId() string {
	if x != nil && x.ExperimentId != nil {
		return *x.ExperimentId
	}
	return ""
}

func (x *RunInfo) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *RunInfo) GetStatus() RunStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return RunStatus_RUNNING
}

func (x *RunInfo) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *RunInfo) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *RunInfo) GetArtifactUri() string {
	if x != nil && x.ArtifactUri != nil {
		return *x.ArtifactUri
	}
	return ""
}

func (x *RunInfo) GetLifecycleStage() string {
	if x != nil && x.LifecycleStage != nil {
		return *x.LifecycleStage
	}
	return ""
}

// Experiment
type Experiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the experiment.
	ExperimentId *string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId" json:"experiment_id,omitempty" query:"experiment_id" params:"experiment_id"`
	// Human readable name that identifies the experiment.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty" query:"name" params:"name"`
	// Location where artifacts for the experiment are stored.
	ArtifactLocation *string `protobuf:"bytes,3,opt,name=artifact_location,json=artifactLocation" json:"artifact_location,omitempty" query:"artifact_location" params:"artifact_location"`
	// Current life cycle stage of the experiment: "active" or "deleted".
	// Deleted experiments are not returned by APIs.
	LifecycleStage *string `protobuf:"bytes,4,opt,name=lifecycle_stage,json=lifecycleStage" json:"lifecycle_stage,omitempty" query:"lifecycle_stage" params:"lifecycle_stage"`
	// Last update time
	LastUpdateTime *int64 `protobuf:"varint,5,opt,name=last_update_time,json=lastUpdateTime" json:"last_update_time,omitempty" query:"last_update_time" params:"last_update_time"`
	// Creation time
	CreationTime *int64 `protobuf:"varint,6,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty" query:"creation_time" params:"creation_time"`
	// Tags: Additional metadata key-value pairs.
	Tags []*ExperimentTag `protobuf:"bytes,7,rep,name=tags" json:"tags,omitempty" query:"tags" params:"tags"`
}

func (x *Experiment) Reset() {
	*x = Experiment{}
	mi := &file_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Experiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Experiment) ProtoMessage() {}

func (x *Experiment) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Experiment.ProtoReflect.Descriptor instead.
func (*Experiment) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{9}
}

func (x *Experiment) GetExperimentId() string {
	if x != nil && x.ExperimentId != nil {
		return *x.ExperimentId
	}
	return ""
}

func (x *Experiment) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Experiment) GetArtifactLocation() string {
	if x != nil && x.ArtifactLocation != nil {
		return *x.ArtifactLocation
	}
	return ""
}

func (x *Experiment) GetLifecycleStage() string {
	if x != nil && x.LifecycleStage != nil {
		return *x.LifecycleStage
	}
	return ""
}

func (x *Experiment) GetLastUpdateTime() int64 {
	if x != nil && x.LastUpdateTime != nil {
		return *x.LastUpdateTime
	}
	return 0
}

func (x *Experiment) GetCreationTime() int64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

func (x *Experiment) GetTags() []*ExperimentTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

// DatasetInput. Represents a dataset and input tags.
type DatasetInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of tags for the dataset input, e.g. a “context” tag with value “training”
	Tags []*InputTag `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty" query:"tags" params:"tags"`
	// The dataset being used as a Run input.
	Dataset *Dataset `protobuf:"bytes,2,opt,name=dataset" json:"dataset,omitempty" query:"dataset" params:"dataset" validate:"required"`
}

func (x *DatasetInput) Reset() {
	*x = DatasetInput{}
	mi := &file_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetInput) ProtoMessage() {}

func (x *DatasetInput) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetInput.ProtoReflect.Descriptor instead.
func (*DatasetInput) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{10}
}

func (x *DatasetInput) GetTags() []*InputTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DatasetInput) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

// Represents a LoggedModel or Registered Model Version input to a Run.
type ModelInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the model.
	ModelId *string `protobuf:"bytes,1,opt,name=model_id,json=modelId" json:"model_id,omitempty" query:"model_id" params:"model_id"`
}

func (x *ModelInput) Reset() {
	*x = ModelInput{}
	mi := &file_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelInput) ProtoMessage() {}

func (x *ModelInput) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelInput.ProtoReflect.Descriptor instead.
func (*ModelInput) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{11}
}

func (x *ModelInput) GetModelId() string {
	if x != nil && x.ModelId != nil {
		return *x.ModelId
	}
	return ""
}

// Tag for an input.
type InputTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tag key.
	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty" query:"key" params:"key" validate:"required,max=255"`
	// The tag value.
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty" query:"value" params:"value" validate:"required,max=500"`
}

func (x *InputTag) Reset() {
	*x = InputTag{}
	mi := &file_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputTag) ProtoMessage() {}

func (x *InputTag) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputTag.ProtoReflect.Descriptor instead.
func (*InputTag) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{12}
}

func (x *InputTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *InputTag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// Dataset. Represents a reference to data used for training, testing, or evaluation during
// the model development process.
type Dataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset. E.g. “my.uc.table@2” “nyc-taxi-dataset”, “fantastic-elk-3”
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty" query:"name" params:"name" validate:"required,max=500"`
	// Dataset digest, e.g. an md5 hash of the dataset that uniquely identifies it
	// within datasets of the same name.
	Digest *string `protobuf:"bytes,2,opt,name=digest" json:"digest,omitempty" query:"digest" params:"digest" validate:"required,max=36"`
	// The type of the dataset source, e.g. ‘databricks-uc-table’, ‘DBFS’, ‘S3’, ...
	SourceType *string `protobuf:"bytes,3,opt,name=source_type,json=sourceType" json:"source_type,omitempty" query:"source_type" params:"source_type" validate:"required"`
	// Source information for the dataset. Note that the source may not exactly reproduce the
	// dataset if it was transformed / modified before use with MLflow.
	Source *string `protobuf:"bytes,4,opt,name=source" json:"source,omitempty" query:"source" params:"source" validate:"required,max=65535"`
	// The schema of the dataset. E.g., MLflow ColSpec JSON for a dataframe, MLflow TensorSpec JSON
	// for an ndarray, or another schema format.
	Schema *string `protobuf:"bytes,5,opt,name=schema" json:"schema,omitempty" query:"schema" params:"schema" validate:"max:1048575"`
	// The profile of the dataset. Summary statistics for the dataset, such as the number of rows
	// in a table, the mean / std / mode of each column in a table, or the number of elements
	// in an array.
	Profile *string `protobuf:"bytes,6,opt,name=profile" json:"profile,omitempty" query:"profile" params:"profile" validate:"max:16777215"`
}

func (x *Dataset) Reset() {
	*x = Dataset{}
	mi := &file_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataset) ProtoMessage() {}

func (x *Dataset) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataset.ProtoReflect.Descriptor instead.
func (*Dataset) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{13}
}

func (x *Dataset) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Dataset) GetDigest() string {
	if x != nil && x.Digest != nil {
		return *x.Digest
	}
	return ""
}

func (x *Dataset) GetSourceType() string {
	if x != nil && x.SourceType != nil {
		return *x.SourceType
	}
	return ""
}

func (x *Dataset) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *Dataset) GetSchema() string {
	if x != nil && x.Schema != nil {
		return *x.Schema
	}
	return ""
}

func (x *Dataset) GetProfile() string {
	if x != nil && x.Profile != nil {
		return *x.Profile
	}
	return ""
}

// Represents a LoggedModel output of a Run.
type ModelOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the model.
	ModelId *string `protobuf:"bytes,1,opt,name=model_id,json=modelId" json:"model_id,omitempty" query:"model_id" params:"model_id"`
	// Step at which the model was produced.
	Step *int64 `protobuf:"varint,2,opt,name=step" json:"step,omitempty" query:"step" params:"step"`
}

func (x *ModelOutput) Reset() {
	*x = ModelOutput{}
	mi := &file_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelOutput) ProtoMessage() {}

func (x *ModelOutput) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelOutput.ProtoReflect.Descriptor instead.
func (*ModelOutput) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{14}
}

func (x *ModelOutput) GetModelId() string {
	if x != nil && x.ModelId != nil {
		return *x.ModelId
	}
	return ""
}

func (x *ModelOutput) GetStep() int64 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

type CreateExperiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Experiment name.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty" query:"name" params:"name" validate:"required,max=500"`
	// Location where all artifacts for the experiment are stored.
	// If not provided, the remote server will select an appropriate default.
	ArtifactLocation *string `protobuf:"bytes,2,opt,name=artifact_location,json=artifactLocation" json:"artifact_location,omitempty" query:"artifact_location" params:"artifact_location" validate:"omitempty,uriWithoutFragmentsOrParamsOrDotDotInQuery"`
	// A collection of tags to set on the experiment. Maximum tag size and number of tags per request
	// depends on the storage backend. All storage backends are guaranteed to support tag keys up
	// to 250 bytes in size and tag values up to 5000 bytes in size. All storage backends are also
	// guaranteed to support up to 20 tags per request.
	Tags []*ExperimentTag `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty" query:"tags" params:"tags"`
}

func (x *CreateExperiment) Reset() {
	*x = CreateExperiment{}
	mi := &file_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateExperiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExperiment) ProtoMessage() {}

func (x *CreateExperiment) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExperiment.ProtoReflect.Descriptor instead.
func (*CreateExperiment) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{15}
}

func (x *CreateExperiment) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateExperiment) GetArtifactLocation() string {
	if x != nil && x.ArtifactLocation != nil {
		return *x.ArtifactLocation
	}
	return ""
}

func (x *CreateExperiment) GetTags() []*ExperimentTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type SearchExperiments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of experiments desired.
	// Servers may select a desired default `max_results` value. All servers are
	// guaranteed to support a `max_results` threshold of at least 1,000 but may
	// support more. Callers of this endpoint are encouraged to pass max_results
	// explicitly and leverage page_token to iterate through experiments.
	MaxResults *int64 `protobuf:"varint,1,opt,name=max_results,json=maxResults" json:"max_results,omitempty" query:"max_results" params:"max_results" validate:"positiveNonZeroInteger,max=50000"`
	// Token indicating the page of experiments to fetch
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken" json:"page_token,omitempty" query:"page_token" params:"page_token"`
	// A filter expression over experiment attributes and tags that allows returning a subset of
	// experiments. The syntax is a subset of SQL that supports ANDing together binary operations
	// between an attribute or tag, and a constant.
	//
	// Example: “name LIKE 'test-%' AND tags.key = 'value'“
	//
	// You can select columns with special characters (hyphen, space, period, etc.) by using
	// double quotes or backticks.
	//
	// Example: “tags."extra-key" = 'value'“ or “tags.`extra-key` = 'value'“
	//
	// Supported operators are “=“, “!=“, “LIKE“, and “ILIKE“.
	Filter *string `protobuf:"bytes,3,opt,name=filter" json:"filter,omitempty" query:"filter" params:"filter"`
	// List of columns for ordering search results, which can include experiment name and id
	// with an optional "DESC" or "ASC" annotation, where "ASC" is the default.
	// Tiebreaks are done by experiment id DESC.
	OrderBy []string `protobuf:"bytes,4,rep,name=order_by,json=orderBy" json:"order_by,omitempty" query:"order_by" params:"order_by"`
	// Qualifier for type of experiments to be returned.
	// If unspecified, return only active experiments.
	ViewType *ViewType `protobuf:"varint,5,opt,name=view_type,json=viewType,enum=mlflow.ViewType" json:"view_type,omitempty" query:"view_type" params:"view_type"`
}

func (x *SearchExperiments) Reset() {
	*x = SearchExperiments{}
	mi := &file_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchExperiments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchExperiments) ProtoMessage() {}

func (x *SearchExperiments) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchExperiments.ProtoReflect.Descriptor instead.
func (*SearchExperiments) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{16}
}

func (x *SearchExperiments) GetMaxResults() int64 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

func (x *SearchExperiments) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *SearchExperiments) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *SearchExperiments) GetOrderBy() []string {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *SearchExperiments) GetViewType() ViewType {
	if x != nil && x.ViewType != nil {
		return *x.ViewType
	}
	return ViewType_ACTIVE_ONLY
}

type GetExperiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the associated experiment.
	ExperimentId *string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId" json:"experiment_id,omitempty" query:"experiment_id" params:"experiment_id" validate:"required,stringAsPositiveInteger"`
}

func (x *GetExperiment) Reset() {
	*x = GetExperiment{}
	mi := &file_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExperiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperiment) ProtoMessage() {}

func (x *GetExperiment) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperiment.ProtoReflect.Descriptor instead.
func (*GetExperiment) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{17}
}

func (x *GetExperiment) GetExperimentId() string {
	if x != nil && x.ExperimentId != nil {
		return *x.ExperimentId
	}
	return ""
}

type DeleteExperiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the associated experiment.
	ExperimentId *string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId" json:"experiment_id,omitempty" query:"experiment_id" params:"experiment_id" validate:"required,stringAsPositiveInteger"`
}

func (x *DeleteExperiment) Reset() {
	*x = DeleteExperiment{}
	mi := &file_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteExperiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperiment) ProtoMessage() {}

func (x *DeleteExperiment) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperiment.ProtoReflect.Descriptor instead.
func (*DeleteExperiment) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteExperiment) GetExperimentId() string {
	if x != nil && x.ExperimentId != nil {
		return *x.ExperimentId
	}
	return ""
}

type RestoreExperiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the associated experiment.
	ExperimentId *string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId" json:"experiment_id,omitempty" query:"experiment_id" params:"experiment_id"`
}

func (x *RestoreExperiment) Reset() {
	*x = RestoreExperiment{}
	mi := &file_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreExperiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreExperiment) ProtoMessage() {}

func (x *RestoreExperiment) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreExperiment.ProtoReflect.Descriptor instead.
func (*RestoreExperiment) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{19}
}

func (x *RestoreExperiment) GetExperimentId() string {
	if x != nil && x.ExperimentId != nil {
		return *x.ExperimentId
	}
	return ""
}

type UpdateExperiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the associated experiment.
	ExperimentId *string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId" json:"experiment_id,omitempty" query:"experiment_id" params:"experiment_id"`
	// If provided, the experiment's name is changed to the new name. The new name must be unique.
	NewName *string `protobuf:"bytes,2,opt,name=new_name,json=newName" json:"new_name,omitempty" query:"new_name" params:"new_name"`
}

func (x *UpdateExperiment) Reset() {
	*x = UpdateExperiment{}
	mi := &file_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateExperiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExperiment) ProtoMessage() {}

func (x *UpdateExperiment) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExperiment.ProtoReflect.Descriptor instead.
func (*UpdateExperiment) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateExperiment) GetExperimentId() string {
	if x != nil && x.ExperimentId != nil {
		return *x.ExperimentId
	}
	return ""
}

func (x *UpdateExperiment) GetNewName() string {
	if x != nil && x.NewName != nil {
		return *x.NewName
	}
	return ""
}

type CreateRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the associated experiment.
	ExperimentId *string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId" json:"experiment_id,omitempty" query:"experiment_id" params:"experiment_id" validate:"required,stringAsPositiveInteger"`
	// ID of the user executing the run.
	// This field is deprecated as of MLflow 1.0, and will be removed in a future
	// MLflow release. Use 'mlflow.user' tag instead.
	UserId *string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty" query:"user_id" params:"user_id"`
	// Name of the run.
	RunName *string `protobuf:"bytes,3,opt,name=run_name,json=runName" json:"run_name,omitempty" query:"run_name" params:"run_name"`
	// Unix timestamp in milliseconds of when the run started.
	StartTime *int64 `protobuf:"varint,7,opt,name=start_time,json=startTime" json:"start_time,omitempty" query:"start_time" params:"start_time"`
	// Additional metadata for run.
	Tags []*RunTag `protobuf:"bytes,9,rep,name=tags" json:"tags,omitempty" query:"tags" params:"tags"`
}

func (x *CreateRun) Reset() {
	*x = CreateRun{}
	mi := &file_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRun) ProtoMessage() {}

func (x *CreateRun) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRun.ProtoReflect.Descriptor instead.
func (*CreateRun) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{21}
}

func (x *CreateRun) GetExperimentId() string {
	if x != nil && x.ExperimentId != nil {
		return *x.ExperimentId
	}
	return ""
}

func (x *CreateRun) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *CreateRun) GetRunName() string {
	if x != nil && x.RunName != nil {
		return *x.RunName
	}
	return ""
}

func (x *CreateRun) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CreateRun) GetTags() []*RunTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type UpdateRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the run to update. Must be provided.
	RunId *string `protobuf:"bytes,4,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id" params:"run_id"`
	// [Deprecated, use run_id instead] ID of the run to update.. This field will
	// be removed in a future MLflow version.
	RunUuid *string `protobuf:"bytes,1,opt,name=run_uuid,json=runUuid" json:"run_uuid,omitempty" query:"run_uuid" params:"run_uuid"`
	// Updated status of the run.
	Status *RunStatus `protobuf:"varint,2,opt,name=status,enum=mlflow.RunStatus" json:"status,omitempty" query:"status" params:"status"`
	// Unix timestamp in milliseconds of when the run ended.
	EndTime *int64 `protobuf:"varint,3,opt,name=end_time,json=endTime" json:"end_time,omitempty" query:"end_time" params:"end_time"`
	// Updated name of the run.
	RunName *string `protobuf:"bytes,5,opt,name=run_name,json=runName" json:"run_name,omitempty" query:"run_name" params:"run_name"`
}

func (x *UpdateRun) Reset() {
	*x = UpdateRun{}
	mi := &file_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRun) ProtoMessage() {}

func (x *UpdateRun) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRun.ProtoReflect.Descriptor instead.
func (*UpdateRun) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateRun) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *UpdateRun) GetRunUuid() string {
	if x != nil && x.RunUuid != nil {
		return *x.RunUuid
	}
	return ""
}

func (x *UpdateRun) GetStatus() RunStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return RunStatus_RUNNING
}

func (x *UpdateRun) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *UpdateRun) GetRunName() string {
	if x != nil && x.RunName != nil {
		return *x.RunName
	}
	return ""
}

type DeleteRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the run to delete.
	RunId *string `protobuf:"bytes,1,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id" params:"run_id"`
}

func (x *DeleteRun) Reset() {
	*x = DeleteRun{}
	mi := &file_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRun) ProtoMessage() {}

func (x *DeleteRun) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRun.ProtoReflect.Descriptor instead.
func (*DeleteRun) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteRun) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

type RestoreRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the run to restore.
	RunId *string `protobuf:"bytes,1,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id" params:"run_id"`
}

func (x *RestoreRun) Reset() {
	*x = RestoreRun{}
	mi := &file_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreRun) ProtoMessage() {}

func (x *RestoreRun) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreRun.ProtoReflect.Descriptor instead.
func (*RestoreRun) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{24}
}

func (x *RestoreRun) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

type LogMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the run under which to log the metric. Must be provided.
	RunId *string `protobuf:"bytes,6,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id" params:"run_id" validate:"required"`
	// [Deprecated, use run_id instead] ID of the run under which to log the metric. This field will
	// be removed in a future MLflow version.
	RunUuid *string `protobuf:"bytes,1,opt,name=run_uuid,json=runUuid" json:"run_uuid,omitempty" query:"run_uuid" params:"run_uuid"`
	// Name of the metric.
	Key *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty" query:"key" params:"key" validate:"required"`
	// Double value of the metric being logged.
	Value *float64 `protobuf:"fixed64,3,opt,name=value" json:"value,omitempty" query:"value" params:"value" validate:"required"`
	// Unix timestamp in milliseconds at the time metric was logged.
	Timestamp *int64 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty" query:"timestamp" params:"timestamp" validate:"required"`
	// Step at which to log the metric
	Step *int64 `protobuf:"varint,5,opt,name=step,def=0" json:"step,omitempty" query:"step" params:"step"`
	// ID of the logged model associated with the metric, if applicable
	ModelId *string `protobuf:"bytes,7,opt,name=model_id,json=modelId" json:"model_id,omitempty" query:"model_id" params:"model_id"`
	// The name of the dataset associated with the metric.
	// E.g. “my.uc.table@2” “nyc-taxi-dataset”, “fantastic-elk-3”
	DatasetName *string `protobuf:"bytes,8,opt,name=dataset_name,json=datasetName" json:"dataset_name,omitempty" query:"dataset_name" params:"dataset_name"`
	// Dataset digest of the dataset associated with the metric,
	// e.g. an md5 hash of the dataset that uniquely identifies it
	// within datasets of the same name.
	DatasetDigest *string `protobuf:"bytes,9,opt,name=dataset_digest,json=datasetDigest" json:"dataset_digest,omitempty" query:"dataset_digest" params:"dataset_digest"`
}

// Default values for LogMetric fields.
const (
	Default_LogMetric_Step = int64(0)
)

func (x *LogMetric) Reset() {
	*x = LogMetric{}
	mi := &file_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMetric) ProtoMessage() {}

func (x *LogMetric) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMetric.ProtoReflect.Descriptor instead.
func (*LogMetric) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{25}
}

func (x *LogMetric) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *LogMetric) GetRunUuid() string {
	if x != nil && x.RunUuid != nil {
		return *x.RunUuid
	}
	return ""
}

func (x *LogMetric) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *LogMetric) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *LogMetric) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *LogMetric) GetStep() int64 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return Default_LogMetric_Step
}

func (x *LogMetric) GetModelId() string {
	if x != nil && x.ModelId != nil {
		return *x.ModelId
	}
	return ""
}

func (x *LogMetric) GetDatasetName() string {
	if x != nil && x.DatasetName != nil {
		return *x.DatasetName
	}
	return ""
}

func (x *LogMetric) GetDatasetDigest() string {
	if x != nil && x.DatasetDigest != nil {
		return *x.DatasetDigest
	}
	return ""
}

type LogParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the run under which to log the param. Must be provided.
	RunId *string `protobuf:"bytes,4,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id" params:"run_id"`
	// [Deprecated, use run_id instead] ID of the run under which to log the param. This field will
	// be removed in a future MLflow version.
	RunUuid *string `protobuf:"bytes,1,opt,name=run_uuid,json=runUuid" json:"run_uuid,omitempty" query:"run_uuid" params:"run_uuid"`
	// Name of the param. Maximum size is 255 bytes.
	Key *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty" query:"key" params:"key" validate:"required,max=250,validMetricParamOrTagName,pathIsUnique"`
	// String value of the param being logged. Maximum size is 6000 bytes.
	Value *string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty" query:"value" params:"value" validate:"omitempty,truncate=6000"`
}

func (x *LogParam) Reset() {
	*x = LogParam{}
	mi := &file_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogParam) ProtoMessage() {}

func (x *LogParam) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogParam.ProtoReflect.Descriptor instead.
func (*LogParam) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{26}
}

func (x *LogParam) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *LogParam) GetRunUuid() string {
	if x != nil && x.RunUuid != nil {
		return *x.RunUuid
	}
	return ""
}

func (x *LogParam) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *LogParam) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type SetExperimentTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the experiment under which to log the tag. Must be provided.
	ExperimentId *string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId" json:"experiment_id,omitempty" query:"experiment_id" params:"experiment_id" validate:"required"`
	// Name of the tag. Maximum size depends on storage backend.
	// All storage backends are guaranteed to support key values up to 250 bytes in size.
	Key *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty" query:"key" params:"key" validate:"required,max=250,validMetricParamOrTagName"`
	// String value of the tag being logged. Maximum size depends on storage backend.
	// All storage backends are guaranteed to support key values up to 5000 bytes in size.
	Value *string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty" query:"value" params:"value" validate:"max=5000"`
}

func (x *SetExperimentTag) Reset() {
	*x = SetExperimentTag{}
	mi := &file_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetExperimentTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetExperimentTag) ProtoMessage() {}

func (x *SetExperimentTag) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetExperimentTag.ProtoReflect.Descriptor instead.
func (*SetExperimentTag) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{27}
}

func (x *SetExperimentTag) GetExperimentId() string {
	if x != nil && x.ExperimentId != nil {
		return *x.ExperimentId
	}
	return ""
}

func (x *SetExperimentTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *SetExperimentTag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type SetTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the run under which to log the tag. Must be provided.
	RunId *string `protobuf:"bytes,4,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id" params:"run_id"`
	// [Deprecated, use run_id instead] ID of the run under which to log the tag. This field will
	// be removed in a future MLflow version.
	RunUuid *string `protobuf:"bytes,1,opt,name=run_uuid,json=runUuid" json:"run_uuid,omitempty" query:"run_uuid" params:"run_uuid"`
	// Name of the tag. Maximum size depends on storage backend.
	// All storage backends are guaranteed to support key values up to 250 bytes in size.
	Key *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty" query:"key" params:"key" validate:"required,max=1000,validMetricParamOrTagName,pathIsUnique"`
	// String value of the tag being logged. Maximum size depends on storage backend.
	// All storage backends are guaranteed to support key values up to 5000 bytes in size.
	Value *string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty" query:"value" params:"value" validate:"omitempty,truncate=8000"`
}

func (x *SetTag) Reset() {
	*x = SetTag{}
	mi := &file_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTag) ProtoMessage() {}

func (x *SetTag) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTag.ProtoReflect.Descriptor instead.
func (*SetTag) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{28}
}

func (x *SetTag) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *SetTag) GetRunUuid() string {
	if x != nil && x.RunUuid != nil {
		return *x.RunUuid
	}
	return ""
}

func (x *SetTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *SetTag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type DeleteTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the run that the tag was logged under. Must be provided.
	RunId *string `protobuf:"bytes,1,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id" params:"run_id" validate:"required"`
	// Name of the tag. Maximum size is 255 bytes. Must be provided.
	Key *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty" query:"key" params:"key" validate:"required"`
}

func (x *DeleteTag) Reset() {
	*x = DeleteTag{}
	mi := &file_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTag) ProtoMessage() {}

func (x *DeleteTag) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTag.ProtoReflect.Descriptor instead.
func (*DeleteTag) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteTag) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *DeleteTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

type GetRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the run to fetch. Must be provided.
	RunId *string `protobuf:"bytes,2,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id" params:"run_id"`
	// [Deprecated, use run_id instead] ID of the run to fetch. This field will
	// be removed in a future MLflow version.
	RunUuid *string `protobuf:"bytes,1,opt,name=run_uuid,json=runUuid" json:"run_uuid,omitempty" query:"run_uuid" params:"run_uuid"`
}

func (x *GetRun) Reset() {
	*x = GetRun{}
	mi := &file_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRun) ProtoMessage() {}

func (x *GetRun) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRun.ProtoReflect.Descriptor instead.
func (*GetRun) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{30}
}

func (x *GetRun) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *GetRun) GetRunUuid() string {
	if x != nil && x.RunUuid != nil {
		return *x.RunUuid
	}
	return ""
}

type SearchRuns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of experiment IDs to search over.
	ExperimentIds []string `protobuf:"bytes,1,rep,name=experiment_ids,json=experimentIds" json:"experiment_ids,omitempty" query:"experiment_ids" params:"experiment_ids"`
	// A filter expression over params, metrics, and tags, that allows returning a subset of
	// runs. The syntax is a subset of SQL that supports ANDing together binary operations
	// between a param, metric, or tag and a constant.
	//
	// Example: “metrics.rmse < 1 and params.model_class = 'LogisticRegression'“
	//
	// You can select columns with special characters (hyphen, space, period, etc.) by using double quotes:
	// “metrics."model class" = 'LinearRegression' and tags."user-name" = 'Tomas'“
	//
	// Supported operators are “=“, “!=“, “>“, “>=“, “<“, and “<=“.
	Filter *string `protobuf:"bytes,4,opt,name=filter" json:"filter,omitempty" query:"filter" params:"filter"`
	// Whether to display only active, only deleted, or all runs.
	// Defaults to only active runs.
	RunViewType *ViewType `protobuf:"varint,3,opt,name=run_view_type,json=runViewType,enum=mlflow.ViewType,def=1" json:"run_view_type,omitempty" query:"run_view_type" params:"run_view_type" validate:"omitempty"`
	// Maximum number of runs desired. If unspecified, defaults to 1000.
	// All servers are guaranteed to support a `max_results` threshold of at least 50,000
	// but may support more. Callers of this endpoint are encouraged to pass max_results
	// explicitly and leverage page_token to iterate through experiments.
	MaxResults *int32 `protobuf:"varint,5,opt,name=max_results,json=maxResults,def=1000" json:"max_results,omitempty" query:"max_results" params:"max_results" validate:"gt=0,max=50000"`
	// List of columns to be ordered by, including attributes, params, metrics, and tags with an
	// optional "DESC" or "ASC" annotation, where "ASC" is the default.
	// Example: ["params.input DESC", "metrics.alpha ASC", "metrics.rmse"]
	// Tiebreaks are done by start_time DESC followed by run_id for runs with the same start time
	// (and this is the default ordering criterion if order_by is not provided).
	OrderBy   []string `protobuf:"bytes,6,rep,name=order_by,json=orderBy" json:"order_by,omitempty" query:"order_by" params:"order_by"`
	PageToken *string  `protobuf:"bytes,7,opt,name=page_token,json=pageToken" json:"page_token,omitempty" query:"page_token" params:"page_token"`
}

// Default values for SearchRuns fields.
const (
	Default_SearchRuns_RunViewType = ViewType_ACTIVE_ONLY
	Default_SearchRuns_MaxResults  = int32(1000)
)

func (x *SearchRuns) Reset() {
	*x = SearchRuns{}
	mi := &file_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRuns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRuns) ProtoMessage() {}

func (x *SearchRuns) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRuns.ProtoReflect.Descriptor instead.
func (*SearchRuns) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{31}
}

func (x *SearchRuns) GetExperimentIds() []string {
	if x != nil {
		return x.ExperimentIds
	}
	return nil
}

func (x *SearchRuns) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *SearchRuns) GetRunViewType() ViewType {
	if x != nil && x.RunViewType != nil {
		return *x.RunViewType
	}
	return Default_SearchRuns_RunViewType
}

func (x *SearchRuns) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return Default_SearchRuns_MaxResults
}

func (x *SearchRuns) GetOrderBy() []string {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *SearchRuns) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type ListArtifacts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the run whose artifacts to list. Must be provided.
	RunId *string `protobuf:"bytes,3,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id" params:"run_id"`
	// [Deprecated, use run_id instead] ID of the run whose artifacts to list. This field will
	// be removed in a future MLflow version.
	RunUuid *string `protobuf:"bytes,1,opt,name=run_uuid,json=runUuid" json:"run_uuid,omitempty" query:"run_uuid" params:"run_uuid"`
	// Filter artifacts matching this path (a relative path from the root artifact directory).
	Path *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty" query:"path" params:"path"`
	// Token indicating the page of artifact results to fetch
	PageToken *string `protobuf:"bytes,4,opt,name=page_token,json=pageToken" json:"page_token,omitempty" query:"page_token" params:"page_token"`
}

func (x *ListArtifacts) Reset() {
	*x = ListArtifacts{}
	mi := &file_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListArtifacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArtifacts) ProtoMessage() {}

func (x *ListArtifacts) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArtifacts.ProtoReflect.Descriptor instead.
func (*ListArtifacts) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{32}
}

func (x *ListArtifacts) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *ListArtifacts) GetRunUuid() string {
	if x != nil && x.RunUuid != nil {
		return *x.RunUuid
	}
	return ""
}

func (x *ListArtifacts) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *ListArtifacts) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

// Metadata of a single artifact file or directory.
type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path relative to the root artifact directory run.
	Path *string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty" query:"path" params:"path"`
	// Whether the path is a directory.
	IsDir *bool `protobuf:"varint,2,opt,name=is_dir,json=isDir" json:"is_dir,omitempty" query:"is_dir" params:"is_dir"`
	// Size in bytes. Unset for directories.
	FileSize *int64 `protobuf:"varint,3,opt,name=file_size,json=fileSize" json:"file_size,omitempty" query:"file_size" params:"file_size"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	mi := &file_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{33}
}

func (x *FileInfo) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *FileInfo) GetIsDir() bool {
	if x != nil && x.IsDir != nil {
		return *x.IsDir
	}
	return false
}

func (x *FileInfo) GetFileSize() int64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

type GetMetricHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the run from which to fetch metric values. Must be provided.
	RunId *string `protobuf:"bytes,3,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id" params:"run_id"`
	// [Deprecated, use run_id instead] ID of the run from which to fetch metric values. This field
	// will be removed in a future MLflow version.
	RunUuid *string `protobuf:"bytes,1,opt,name=run_uuid,json=runUuid" json:"run_uuid,omitempty" query:"run_uuid" params:"run_uuid"`
	// Name of the metric.
	MetricKey *string `protobuf:"bytes,2,opt,name=metric_key,json=metricKey" json:"metric_key,omitempty" query:"metric_key" params:"metric_key"`
	// Token indicating the page of metric history to fetch
	PageToken *string `protobuf:"bytes,4,opt,name=page_token,json=pageToken" json:"page_token,omitempty" query:"page_token" params:"page_token"`
	// Maximum number of logged instances of a metric for a run to return per call.
	// Backend servers may restrict the value of `max_results` depending on performance requirements.
	// Requests that do not specify this value will behave as non-paginated queries where all
	// metric history values for a given metric within a run are returned in a single response.
	MaxResults *int32 `protobuf:"varint,5,opt,name=max_results,json=maxResults" json:"max_results,omitempty" query:"max_results" params:"max_results"`
}

func (x *GetMetricHistory) Reset() {
	*x = GetMetricHistory{}
	mi := &file_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMetricHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricHistory) ProtoMessage() {}

func (x *GetMetricHistory) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricHistory.ProtoReflect.Descriptor instead.
func (*GetMetricHistory) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{34}
}

func (x *GetMetricHistory) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *GetMetricHistory) GetRunUuid() string {
	if x != nil && x.RunUuid != nil {
		return *x.RunUuid
	}
	return ""
}

func (x *GetMetricHistory) GetMetricKey() string {
	if x != nil && x.MetricKey != nil {
		return *x.MetricKey
	}
	return ""
}

func (x *GetMetricHistory) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *GetMetricHistory) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

type MetricWithRunId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key identifying this metric.
	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty" query:"key" params:"key"`
	// Value associated with this metric.
	Value *float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty" query:"value" params:"value"`
	// The timestamp at which this metric was recorded.
	Timestamp *int64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty" query:"timestamp" params:"timestamp"`
	// Step at which to log the metric.
	Step *int64 `protobuf:"varint,4,opt,name=step,def=0" json:"step,omitempty" query:"step" params:"step"`
	// The ID of the run containing the metric
	RunId *string `protobuf:"bytes,5,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id" params:"run_id"`
}

// Default values for MetricWithRunId fields.
const (
	Default_MetricWithRunId_Step = int64(0)
)

func (x *MetricWithRunId) Reset() {
	*x = MetricWithRunId{}
	mi := &file_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricWithRunId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricWithRunId) ProtoMessage() {}

func (x *MetricWithRunId) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricWithRunId.ProtoReflect.Descriptor instead.
func (*MetricWithRunId) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{35}
}

func (x *MetricWithRunId) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *MetricWithRunId) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *MetricWithRunId) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *MetricWithRunId) GetStep() int64 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return Default_MetricWithRunId_Step
}

func (x *MetricWithRunId) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

type GetMetricHistoryBulkInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID(s) of the run(s) from which to fetch metric values. Must be provided.
	RunIds []string `protobuf:"bytes,1,rep,name=run_ids,json=runIds" json:"run_ids,omitempty" query:"run_ids" params:"run_ids"`
	// Name of the metric.
	MetricKey *string `protobuf:"bytes,2,opt,name=metric_key,json=metricKey" json:"metric_key,omitempty" query:"metric_key" params:"metric_key"`
	// Optional start step to only fetch metrics after the specified step. Must be defined if
	// end_step is defined.
	StartStep *int32 `protobuf:"varint,3,opt,name=start_step,json=startStep" json:"start_step,omitempty" query:"start_step" params:"start_step"`
	// Optional end step to only fetch metrics before the specified step. Must be defined if
	// start_step is defined.
	EndStep *int32 `protobuf:"varint,4,opt,name=end_step,json=endStep" json:"end_step,omitempty" query:"end_step" params:"end_step"`
	// Maximum number of results to fetch per run specified. Must be set to a positive number.
	// Note, in reality, the API returns at most (max_results + # of run IDs) x (# run IDs) metric
	// data points.
	MaxResults *int32 `protobuf:"varint,5,opt,name=max_results,json=maxResults" json:"max_results,omitempty" query:"max_results" params:"max_results"`
}

func (x *GetMetricHistoryBulkInterval) Reset() {
	*x = GetMetricHistoryBulkInterval{}
	mi := &file_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMetricHistoryBulkInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricHistoryBulkInterval) ProtoMessage() {}

func (x *GetMetricHistoryBulkInterval) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricHistoryBulkInterval.ProtoReflect.Descriptor instead.
func (*GetMetricHistoryBulkInterval) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{36}
}

func (x *GetMetricHistoryBulkInterval) GetRunIds() []string {
	if x != nil {
		return x.RunIds
	}
	return nil
}

func (x *GetMetricHistoryBulkInterval) GetMetricKey() string {
	if x != nil && x.MetricKey != nil {
		return *x.MetricKey
	}
	return ""
}

func (x *GetMetricHistoryBulkInterval) GetStartStep() int32 {
	if x != nil && x.StartStep != nil {
		return *x.StartStep
	}
	return 0
}

func (x *GetMetricHistoryBulkInterval) GetEndStep() int32 {
	if x != nil && x.EndStep != nil {
		return *x.EndStep
	}
	return 0
}

func (x *GetMetricHistoryBulkInterval) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

type LogBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the run to log under
	RunId *string `protobuf:"bytes,1,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id" params:"run_id" validate:"required,runId"`
	// Metrics to log. A single request can contain up to 1000 metrics, and up to 1000
	// metrics, params, and tags in total.
	Metrics []*Metric `protobuf:"bytes,2,rep,name=metrics" json:"metrics,omitempty" query:"metrics" params:"metrics" validate:"max=1000,dive"`
	// Params to log. A single request can contain up to 100 params, and up to 1000
	// metrics, params, and tags in total.
	Params []*Param `protobuf:"bytes,3,rep,name=params" json:"params,omitempty" query:"params" params:"params" validate:"omitempty,uniqueParams,max=100,dive"`
	// Tags to log. A single request can contain up to 100 tags, and up to 1000
	// metrics, params, and tags in total.
	Tags []*RunTag `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty" query:"tags" params:"tags" validate:"max=100"`
}

func (x *LogBatch) Reset() {
	*x = LogBatch{}
	mi := &file_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogBatch) ProtoMessage() {}

func (x *LogBatch) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogBatch.ProtoReflect.Descriptor instead.
func (*LogBatch) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{37}
}

func (x *LogBatch) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *LogBatch) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *LogBatch) GetParams() []*Param {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *LogBatch) GetTags() []*RunTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type LogModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the run to log under
	RunId *string `protobuf:"bytes,1,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id" params:"run_id"`
	// MLmodel file in json format.
	ModelJson *string `protobuf:"bytes,2,opt,name=model_json,json=modelJson" json:"model_json,omitempty" query:"model_json" params:"model_json"`
}

func (x *LogModel) Reset() {
	*x = LogModel{}
	mi := &file_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogModel) ProtoMessage() {}

func (x *LogModel) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogModel.ProtoReflect.Descriptor instead.
func (*LogModel) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{38}
}

func (x *LogModel) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *LogModel) GetModelJson() string {
	if x != nil && x.ModelJson != nil {
		return *x.ModelJson
	}
	return ""
}

type LogInputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the run to log under
	RunId *string `protobuf:"bytes,1,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id" params:"run_id" validate:"required,runId"`
	// Dataset inputs
	Datasets []*DatasetInput `protobuf:"bytes,2,rep,name=datasets" json:"datasets,omitempty" query:"datasets" params:"datasets" validate:"required"`
	// Model inputs
	// (Currently undocumented for LoggedModels private preview)
	Models []*ModelInput `protobuf:"bytes,3,rep,name=models" json:"models,omitempty" query:"models" params:"models"`
}

func (x *LogInputs) Reset() {
	*x = LogInputs{}
	mi := &file_service_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogInputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogInputs) ProtoMessage() {}

func (x *LogInputs) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogInputs.ProtoReflect.Descriptor instead.
func (*LogInputs) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{39}
}

func (x *LogInputs) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *LogInputs) GetDatasets() []*DatasetInput {
	if x != nil {
		return x.Datasets
	}
	return nil
}

func (x *LogInputs) GetModels() []*ModelInput {
	if x != nil {
		return x.Models
	}
	return nil
}

type LogOutputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the Run from which to log outputs.
	RunId *string `protobuf:"bytes,1,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id" params:"run_id"`
	// Model outputs from the Run.
	Models []*ModelOutput `protobuf:"bytes,2,rep,name=models" json:"models,omitempty" query:"models" params:"models"`
}

func (x *LogOutputs) Reset() {
	*x = LogOutputs{}
	mi := &file_service_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogOutputs) ProtoMessage() {}

func (x *LogOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogOutputs.ProtoReflect.Descriptor instead.
func (*LogOutputs) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{40}
}

func (x *LogOutputs) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *LogOutputs) GetModels() []*ModelOutput {
	if x != nil {
		return x.Models
	}
	return nil
}

type GetExperimentByName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the associated experiment.
	ExperimentName *string `protobuf:"bytes,1,opt,name=experiment_name,json=experimentName" json:"experiment_name,omitempty" query:"experiment_name" params:"experiment_name" validate:"required"`
}

func (x *GetExperimentByName) Reset() {
	*x = GetExperimentByName{}
	mi := &file_service_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExperimentByName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentByName) ProtoMessage() {}

func (x *GetExperimentByName) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentByName.ProtoReflect.Descriptor instead.
func (*GetExperimentByName) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{41}
}

func (x *GetExperimentByName) GetExperimentName() string {
	if x != nil && x.ExperimentName != nil {
		return *x.ExperimentName
	}
	return ""
}

type CreateAssessment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The assessment to create.
	Assessment *Assessment `protobuf:"bytes,1,opt,name=assessment" json:"assessment,omitempty" query:"assessment" params:"assessment"`
}

func (x *CreateAssessment) Reset() {
	*x = CreateAssessment{}
	mi := &file_service_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAssessment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAssessment) ProtoMessage() {}

func (x *CreateAssessment) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAssessment.ProtoReflect.Descriptor instead.
func (*CreateAssessment) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{44}
}

func (x *CreateAssessment) GetAssessment() *Assessment {
	if x != nil {
		return x.Assessment
	}
	return nil
}

// A request to update an existing assessment.
type UpdateAssessment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Assessment containing the fields which should be updated.
	Assessment *Assessment `protobuf:"bytes,1,opt,name=assessment" json:"assessment,omitempty" query:"assessment" params:"assessment"`
	// The list of the assessment fields to update. These should correspond to the values (or lack thereof) present in `assessment`.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty" query:"update_mask" params:"update_mask"`
}

func (x *UpdateAssessment) Reset() {
	*x = UpdateAssessment{}
	mi := &file_service_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAssessment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssessment) ProtoMessage() {}

func (x *UpdateAssessment) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssessment.ProtoReflect.Descriptor instead.
func (*UpdateAssessment) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{45}
}

func (x *UpdateAssessment) GetAssessment() *Assessment {
	if x != nil {
		return x.Assessment
	}
	return nil
}

func (x *UpdateAssessment) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// A request to delete an assessment identified by its trace_id and assessment_id.
// The response is empty on successful deletion.
type DeleteAssessment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the trace.
	TraceId *string `protobuf:"bytes,1,opt,name=trace_id,json=traceId" json:"trace_id,omitempty" query:"trace_id" params:"trace_id"`
	// The ID of the assessment.
	AssessmentId *string `protobuf:"bytes,2,opt,name=assessment_id,json=assessmentId" json:"assessment_id,omitempty" query:"assessment_id" params:"assessment_id"`
}

func (x *DeleteAssessment) Reset() {
	*x = DeleteAssessment{}
	mi := &file_service_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAssessment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAssessment) ProtoMessage() {}

func (x *DeleteAssessment) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAssessment.ProtoReflect.Descriptor instead.
func (*DeleteAssessment) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{46}
}

func (x *DeleteAssessment) GetTraceId() string {
	if x != nil && x.TraceId != nil {
		return *x.TraceId
	}
	return ""
}

func (x *DeleteAssessment) GetAssessmentId() string {
	if x != nil && x.AssessmentId != nil {
		return *x.AssessmentId
	}
	return ""
}

// TraceInfo. Represents metadata of a trace.
type TraceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the trace.
	RequestId *string `protobuf:"bytes,1,opt,name=request_id,json=requestId" json:"request_id,omitempty" query:"request_id" params:"request_id"`
	// The ID of the experiment that contains the trace.
	ExperimentId *string `protobuf:"bytes,2,opt,name=experiment_id,json=experimentId" json:"experiment_id,omitempty" query:"experiment_id" params:"experiment_id"`
	// Unix timestamp of when the trace started in milliseconds.
	TimestampMs *int64 `protobuf:"varint,3,opt,name=timestamp_ms,json=timestampMs" json:"timestamp_ms,omitempty" query:"timestamp_ms" params:"timestamp_ms"`
	// Unix timestamp of the duration of the trace in milliseconds.
	ExecutionTimeMs *int64 `protobuf:"varint,4,opt,name=execution_time_ms,json=executionTimeMs" json:"execution_time_ms,omitempty" query:"execution_time_ms" params:"execution_time_ms"`
	// Overall status of the operation being traced (OK, error, etc.).
	Status *TraceStatus `protobuf:"varint,5,opt,name=status,enum=mlflow.TraceStatus" json:"status,omitempty" query:"status" params:"status"`
	// Other trace metadata.
	RequestMetadata []*TraceRequestMetadata `protobuf:"bytes,6,rep,name=request_metadata,json=requestMetadata" json:"request_metadata,omitempty" query:"request_metadata" params:"request_metadata"`
	// Tags for the trace.
	Tags []*TraceTag `protobuf:"bytes,7,rep,name=tags" json:"tags,omitempty" query:"tags" params:"tags"`
}

func (x *TraceInfo) Reset() {
	*x = TraceInfo{}
	mi := &file_service_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceInfo) ProtoMessage() {}

func (x *TraceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceInfo.ProtoReflect.Descriptor instead.
func (*TraceInfo) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{47}
}

func (x *TraceInfo) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

func (x *TraceInfo) GetExperimentId() string {
	if x != nil && x.ExperimentId != nil {
		return *x.ExperimentId
	}
	return ""
}

func (x *TraceInfo) GetTimestampMs() int64 {
	if x != nil && x.TimestampMs != nil {
		return *x.TimestampMs
	}
	return 0
}

func (x *TraceInfo) GetExecutionTimeMs() int64 {
	if x != nil && x.ExecutionTimeMs != nil {
		return *x.ExecutionTimeMs
	}
	return 0
}

func (x *TraceInfo) GetStatus() TraceStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return TraceStatus_TRACE_STATUS_UNSPECIFIED
}

func (x *TraceInfo) GetRequestMetadata() []*TraceRequestMetadata {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

func (x *TraceInfo) GetTags() []*TraceTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type TraceRequestMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key identifying this metadata.
	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty" query:"key" params:"key"`
	// Value identifying this metadata.
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty" query:"value" params:"value"`
}

func (x *TraceRequestMetadata) Reset() {
	*x = TraceRequestMetadata{}
	mi := &file_service_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceRequestMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceRequestMetadata) ProtoMessage() {}

func (x *TraceRequestMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceRequestMetadata.ProtoReflect.Descriptor instead.
func (*TraceRequestMetadata) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{48}
}

func (x *TraceRequestMetadata) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *TraceRequestMetadata) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type TraceTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key identifying this trace tag.
	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty" query:"key" params:"key"`
	// Value associated with this trace tag.
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty" query:"value" params:"value"`
}

func (x *TraceTag) Reset() {
	*x = TraceTag{}
	mi := &file_service_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceTag) ProtoMessage() {}

func (x *TraceTag) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceTag.ProtoReflect.Descriptor instead.
func (*TraceTag) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{49}
}

func (x *TraceTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *TraceTag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type StartTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the associated experiment.
	ExperimentId *string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId" json:"experiment_id,omitempty" query:"experiment_id" params:"experiment_id"`
	// Unix timestamp of when the trace started in milliseconds.
	TimestampMs *int64 `protobuf:"varint,2,opt,name=timestamp_ms,json=timestampMs" json:"timestamp_ms,omitempty" query:"timestamp_ms" params:"timestamp_ms"`
	// Metadata about the request that initiated the trace.
	RequestMetadata []*TraceRequestMetadata `protobuf:"bytes,3,rep,name=request_metadata,json=requestMetadata" json:"request_metadata,omitempty" query:"request_metadata" params:"request_metadata"`
	// Tags for the trace.
	Tags []*TraceTag `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty" query:"tags" params:"tags"`
}

func (x *StartTrace) Reset() {
	*x = StartTrace{}
	mi := &file_service_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTrace) ProtoMessage() {}

func (x *StartTrace) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTrace.ProtoReflect.Descriptor instead.
func (*StartTrace) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{50}
}

func (x *StartTrace) GetExperimentId() string {
	if x != nil && x.ExperimentId != nil {
		return *x.ExperimentId
	}
	return ""
}

func (x *StartTrace) GetTimestampMs() int64 {
	if x != nil && x.TimestampMs != nil {
		return *x.TimestampMs
	}
	return 0
}

func (x *StartTrace) GetRequestMetadata() []*TraceRequestMetadata {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

func (x *StartTrace) GetTags() []*TraceTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type EndTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the trace to end.
	RequestId *string `protobuf:"bytes,1,opt,name=request_id,json=requestId" json:"request_id,omitempty" query:"request_id" params:"request_id"`
	// Unix timestamp of when the trace ended in milliseconds.
	TimestampMs *int64 `protobuf:"varint,2,opt,name=timestamp_ms,json=timestampMs" json:"timestamp_ms,omitempty" query:"timestamp_ms" params:"timestamp_ms"`
	// Overall status of the operation being traced (OK, error, etc).
	Status *TraceStatus `protobuf:"varint,3,opt,name=status,enum=mlflow.TraceStatus" json:"status,omitempty" query:"status" params:"status"`
	// Additional metadata about the operation being traced.
	RequestMetadata []*TraceRequestMetadata `protobuf:"bytes,4,rep,name=request_metadata,json=requestMetadata" json:"request_metadata,omitempty" query:"request_metadata" params:"request_metadata"`
	// Additional tags to add to the trace.
	Tags []*TraceTag `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty" query:"tags" params:"tags"`
}

func (x *EndTrace) Reset() {
	*x = EndTrace{}
	mi := &file_service_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndTrace) ProtoMessage() {}

func (x *EndTrace) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndTrace.ProtoReflect.Descriptor instead.
func (*EndTrace) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{51}
}

func (x *EndTrace) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

func (x *EndTrace) GetTimestampMs() int64 {
	if x != nil && x.TimestampMs != nil {
		return *x.TimestampMs
	}
	return 0
}

func (x *EndTrace) GetStatus() TraceStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return TraceStatus_TRACE_STATUS_UNSPECIFIED
}

func (x *EndTrace) GetRequestMetadata() []*TraceRequestMetadata {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

func (x *EndTrace) GetTags() []*TraceTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type GetTraceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the trace to fetch. Must be provided.
	RequestId *string `protobuf:"bytes,1,opt,name=request_id,json=requestId" json:"request_id,omitempty" query:"request_id" params:"request_id"`
}

func (x *GetTraceInfo) Reset() {
	*x = GetTraceInfo{}
	mi := &file_service_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTraceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceInfo) ProtoMessage() {}

func (x *GetTraceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceInfo.ProtoReflect.Descriptor instead.
func (*GetTraceInfo) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{52}
}

func (x *GetTraceInfo) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

type GetTraceInfoV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the trace to fetch. Must be provided.
	TraceId *string `protobuf:"bytes,1,opt,name=trace_id,json=traceId" json:"trace_id,omitempty" query:"trace_id" params:"trace_id"`
}

func (x *GetTraceInfoV3) Reset() {
	*x = GetTraceInfoV3{}
	mi := &file_service_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTraceInfoV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceInfoV3) ProtoMessage() {}

func (x *GetTraceInfoV3) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceInfoV3.ProtoReflect.Descriptor instead.
func (*GetTraceInfoV3) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{53}
}

func (x *GetTraceInfoV3) GetTraceId() string {
	if x != nil && x.TraceId != nil {
		return *x.TraceId
	}
	return ""
}

type SearchTraces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of experiment IDs to search over.
	ExperimentIds []string `protobuf:"bytes,1,rep,name=experiment_ids,json=experimentIds" json:"experiment_ids,omitempty" query:"experiment_ids" params:"experiment_ids"`
	// A filter expression over trace attributes and tags that allows returning a subset of
	// traces. The syntax is a subset of SQL that supports ANDing together binary operations
	// Example: “trace.status = 'OK' and trace.timestamp_ms > 1711089570679“.
	Filter *string `protobuf:"bytes,2,opt,name=filter" json:"filter,omitempty" query:"filter" params:"filter"`
	// Maximum number of traces desired. Max threshold is 500.
	MaxResults *int32 `protobuf:"varint,3,opt,name=max_results,json=maxResults,def=100" json:"max_results,omitempty" query:"max_results" params:"max_results"`
	// List of columns for ordering the results, e.g. “["timestamp_ms DESC"]“.
	OrderBy []string `protobuf:"bytes,4,rep,name=order_by,json=orderBy" json:"order_by,omitempty" query:"order_by" params:"order_by"`
	// Token indicating the page of traces to fetch.
	PageToken *string `protobuf:"bytes,5,opt,name=page_token,json=pageToken" json:"page_token,omitempty" query:"page_token" params:"page_token"`
}

// Default values for SearchTraces fields.
const (
	Default_SearchTraces_MaxResults = int32(100)
)

func (x *SearchTraces) Reset() {
	*x = SearchTraces{}
	mi := &file_service_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchTraces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTraces) ProtoMessage() {}

func (x *SearchTraces) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTraces.ProtoReflect.Descriptor instead.
func (*SearchTraces) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{54}
}

func (x *SearchTraces) GetExperimentIds() []string {
	if x != nil {
		return x.ExperimentIds
	}
	return nil
}

func (x *SearchTraces) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *SearchTraces) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return Default_SearchTraces_MaxResults
}

func (x *SearchTraces) GetOrderBy() []string {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *SearchTraces) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type SearchUnifiedTraces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelId        *string `protobuf:"bytes,1,opt,name=model_id,json=modelId" json:"model_id,omitempty" query:"model_id" params:"model_id"`
	SqlWarehouseId *string `protobuf:"bytes,2,opt,name=sql_warehouse_id,json=sqlWarehouseId" json:"sql_warehouse_id,omitempty" query:"sql_warehouse_id" params:"sql_warehouse_id"`
	// TODO: Eventually we want to provide an API that only uses model_id
	ExperimentIds []string `protobuf:"bytes,3,rep,name=experiment_ids,json=experimentIds" json:"experiment_ids,omitempty" query:"experiment_ids" params:"experiment_ids"`
	// A filter expression over trace attributes and tags that allows returning a subset of
	// traces. The syntax is a subset of SQL that supports ANDing together binary operations
	// Example: “trace.status = 'OK' and trace.timestamp_ms > 1711089570679“.
	Filter *string `protobuf:"bytes,4,opt,name=filter" json:"filter,omitempty" query:"filter" params:"filter"`
	// Maximum number of traces desired. Max threshold is 500.
	MaxResults *int32 `protobuf:"varint,5,opt,name=max_results,json=maxResults,def=100" json:"max_results,omitempty" query:"max_results" params:"max_results"`
	// List of columns for ordering the results, e.g. “["timestamp_ms DESC"]“.
	OrderBy []string `protobuf:"bytes,6,rep,name=order_by,json=orderBy" json:"order_by,omitempty" query:"order_by" params:"order_by"`
	// Token indicating the page of traces to fetch. This is a unified token that encodes both online and offline traces
	// tokens.
	PageToken *string `protobuf:"bytes,7,opt,name=page_token,json=pageToken" json:"page_token,omitempty" query:"page_token" params:"page_token"`
}

// Default values for SearchUnifiedTraces fields.
const (
	Default_SearchUnifiedTraces_MaxResults = int32(100)
)

func (x *SearchUnifiedTraces) Reset() {
	*x = SearchUnifiedTraces{}
	mi := &file_service_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchUnifiedTraces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUnifiedTraces) ProtoMessage() {}

func (x *SearchUnifiedTraces) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUnifiedTraces.ProtoReflect.Descriptor instead.
func (*SearchUnifiedTraces) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{55}
}

func (x *SearchUnifiedTraces) GetModelId() string {
	if x != nil && x.ModelId != nil {
		return *x.ModelId
	}
	return ""
}

func (x *SearchUnifiedTraces) GetSqlWarehouseId() string {
	if x != nil && x.SqlWarehouseId != nil {
		return *x.SqlWarehouseId
	}
	return ""
}

func (x *SearchUnifiedTraces) GetExperimentIds() []string {
	if x != nil {
		return x.ExperimentIds
	}
	return nil
}

func (x *SearchUnifiedTraces) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *SearchUnifiedTraces) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return Default_SearchUnifiedTraces_MaxResults
}

func (x *SearchUnifiedTraces) GetOrderBy() []string {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *SearchUnifiedTraces) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type GetOnlineTraceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trace ID to retrieve
	TraceId *string `protobuf:"bytes,1,opt,name=trace_id,json=traceId" json:"trace_id,omitempty" query:"trace_id" params:"trace_id"`
	// SQL warehouse to use for query
	SqlWarehouseId *string `protobuf:"bytes,2,opt,name=sql_warehouse_id,json=sqlWarehouseId" json:"sql_warehouse_id,omitempty" query:"sql_warehouse_id" params:"sql_warehouse_id"`
	// Source inference table to use for query
	// ie. "ml.bbqiu.codegen_payload"
	SourceInferenceTable *string `protobuf:"bytes,3,opt,name=source_inference_table,json=sourceInferenceTable" json:"source_inference_table,omitempty" query:"source_inference_table" params:"source_inference_table"`
	// Source databricks request id to use for query
	// ie. "8d1992ce-ba3d-49e9-9701-e9b323c5cc8c"
	SourceDatabricksRequestId *string `protobuf:"bytes,4,opt,name=source_databricks_request_id,json=sourceDatabricksRequestId" json:"source_databricks_request_id,omitempty" query:"source_databricks_request_id" params:"source_databricks_request_id"`
}

func (x *GetOnlineTraceDetails) Reset() {
	*x = GetOnlineTraceDetails{}
	mi := &file_service_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOnlineTraceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnlineTraceDetails) ProtoMessage() {}

func (x *GetOnlineTraceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnlineTraceDetails.ProtoReflect.Descriptor instead.
func (*GetOnlineTraceDetails) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{56}
}

func (x *GetOnlineTraceDetails) GetTraceId() string {
	if x != nil && x.TraceId != nil {
		return *x.TraceId
	}
	return ""
}

func (x *GetOnlineTraceDetails) GetSqlWarehouseId() string {
	if x != nil && x.SqlWarehouseId != nil {
		return *x.SqlWarehouseId
	}
	return ""
}

func (x *GetOnlineTraceDetails) GetSourceInferenceTable() string {
	if x != nil && x.SourceInferenceTable != nil {
		return *x.SourceInferenceTable
	}
	return ""
}

func (x *GetOnlineTraceDetails) GetSourceDatabricksRequestId() string {
	if x != nil && x.SourceDatabricksRequestId != nil {
		return *x.SourceDatabricksRequestId
	}
	return ""
}

type DeleteTraces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the associated experiment.
	ExperimentId *string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId" json:"experiment_id,omitempty" query:"experiment_id" params:"experiment_id"`
	// Case 1: max_timestamp_millis and max_traces must be specified for time-based deletion
	// The maximum timestamp in milliseconds since the UNIX epoch for deleting traces.
	MaxTimestampMillis *int64 `protobuf:"varint,2,opt,name=max_timestamp_millis,json=maxTimestampMillis" json:"max_timestamp_millis,omitempty" query:"max_timestamp_millis" params:"max_timestamp_millis"`
	// The maximum number of traces to delete.
	MaxTraces *int32 `protobuf:"varint,3,opt,name=max_traces,json=maxTraces" json:"max_traces,omitempty" query:"max_traces" params:"max_traces"`
	// Case 2: request_ids must be specified for ID-based deletion
	// A set of request IDs to delete
	RequestIds []string `protobuf:"bytes,4,rep,name=request_ids,json=requestIds" json:"request_ids,omitempty" query:"request_ids" params:"request_ids"`
}

func (x *DeleteTraces) Reset() {
	*x = DeleteTraces{}
	mi := &file_service_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTraces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTraces) ProtoMessage() {}

func (x *DeleteTraces) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTraces.ProtoReflect.Descriptor instead.
func (*DeleteTraces) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{57}
}

func (x *DeleteTraces) GetExperimentId() string {
	if x != nil && x.ExperimentId != nil {
		return *x.ExperimentId
	}
	return ""
}

func (x *DeleteTraces) GetMaxTimestampMillis() int64 {
	if x != nil && x.MaxTimestampMillis != nil {
		return *x.MaxTimestampMillis
	}
	return 0
}

func (x *DeleteTraces) GetMaxTraces() int32 {
	if x != nil && x.MaxTraces != nil {
		return *x.MaxTraces
	}
	return 0
}

func (x *DeleteTraces) GetRequestIds() []string {
	if x != nil {
		return x.RequestIds
	}
	return nil
}

type SetTraceTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the trace on which to set a tag.
	RequestId *string `protobuf:"bytes,1,opt,name=request_id,json=requestId" json:"request_id,omitempty" query:"request_id" params:"request_id"`
	// Name of the tag. Maximum size depends on storage backend.
	// All storage backends are guaranteed to support key values up to 250 bytes in size.
	Key *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty" query:"key" params:"key" validate:"required,max=250,validMetricParamOrTagName,pathIsUnique"`
	// String value of the tag being logged. Maximum size depends on storage backend.
	// All storage backends are guaranteed to support key values up to 250 bytes in size.
	Value *string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty" query:"value" params:"value" validate:"omitempty,truncate=8000"`
}

func (x *SetTraceTag) Reset() {
	*x = SetTraceTag{}
	mi := &file_service_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTraceTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTraceTag) ProtoMessage() {}

func (x *SetTraceTag) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTraceTag.ProtoReflect.Descriptor instead.
func (*SetTraceTag) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{58}
}

func (x *SetTraceTag) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

func (x *SetTraceTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *SetTraceTag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type DeleteTraceTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the trace from which to delete the tag.
	RequestId *string `protobuf:"bytes,1,opt,name=request_id,json=requestId" json:"request_id,omitempty" query:"request_id" params:"request_id"`
	// Name of the tag to delete.
	Key *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty" query:"key" params:"key"`
}

func (x *DeleteTraceTag) Reset() {
	*x = DeleteTraceTag{}
	mi := &file_service_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTraceTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTraceTag) ProtoMessage() {}

func (x *DeleteTraceTag) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTraceTag.ProtoReflect.Descriptor instead.
func (*DeleteTraceTag) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{59}
}

func (x *DeleteTraceTag) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

func (x *DeleteTraceTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

type Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceInfo *TraceInfoV3 `protobuf:"bytes,1,opt,name=trace_info,json=traceInfo" json:"trace_info,omitempty" query:"trace_info" params:"trace_info"`
}

func (x *Trace) Reset() {
	*x = Trace{}
	mi := &file_service_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{60}
}

func (x *Trace) GetTraceInfo() *TraceInfoV3 {
	if x != nil {
		return x.TraceInfo
	}
	return nil
}

// The location where the traces was stored and produced
type TraceLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *TraceLocation_TraceLocationType `protobuf:"varint,1,opt,name=type,enum=mlflow.TraceLocation_TraceLocationType" json:"type,omitempty" query:"type" params:"type"`
	// Types that are assignable to Identifier:
	//
	//	*TraceLocation_MlflowExperiment
	//	*TraceLocation_InferenceTable
	Identifier isTraceLocation_Identifier `protobuf_oneof:"identifier"`
}

func (x *TraceLocation) Reset() {
	*x = TraceLocation{}
	mi := &file_service_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceLocation) ProtoMessage() {}

func (x *TraceLocation) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceLocation.ProtoReflect.Descriptor instead.
func (*TraceLocation) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{61}
}

func (x *TraceLocation) GetType() TraceLocation_TraceLocationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TraceLocation_TRACE_LOCATION_TYPE_UNSPECIFIED
}

func (m *TraceLocation) GetIdentifier() isTraceLocation_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *TraceLocation) GetMlflowExperiment() *TraceLocation_MlflowExperimentLocation {
	if x, ok := x.GetIdentifier().(*TraceLocation_MlflowExperiment); ok {
		return x.MlflowExperiment
	}
	return nil
}

func (x *TraceLocation) GetInferenceTable() *TraceLocation_InferenceTableLocation {
	if x, ok := x.GetIdentifier().(*TraceLocation_InferenceTable); ok {
		return x.InferenceTable
	}
	return nil
}

type isTraceLocation_Identifier interface {
	isTraceLocation_Identifier()
}

type TraceLocation_MlflowExperiment struct {
	MlflowExperiment *TraceLocation_MlflowExperimentLocation `protobuf:"bytes,2,opt,name=mlflow_experiment,json=mlflowExperiment,oneof"`
}

type TraceLocation_InferenceTable struct {
	InferenceTable *TraceLocation_InferenceTableLocation `protobuf:"bytes,3,opt,name=inference_table,json=inferenceTable,oneof"`
}

func (*TraceLocation_MlflowExperiment) isTraceLocation_Identifier() {}

func (*TraceLocation_InferenceTable) isTraceLocation_Identifier() {}

type TraceInfoV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The primary key associated with the trace
	TraceId *string `protobuf:"bytes,1,opt,name=trace_id,json=traceId" json:"trace_id,omitempty" query:"trace_id" params:"trace_id"`
	// Client supplied request ID associated with the trace. This could be used to identify the trace/request from an
	// external system that produced the trace.
	ClientRequestId *string        `protobuf:"bytes,2,opt,name=client_request_id,json=clientRequestId" json:"client_request_id,omitempty" query:"client_request_id" params:"client_request_id"`
	TraceLocation   *TraceLocation `protobuf:"bytes,3,opt,name=trace_location,json=traceLocation" json:"trace_location,omitempty" query:"trace_location" params:"trace_location"`
	// [Deprecated, please use `request_preview` instead.]
	// Request to the model/agent.
	// Equivalent to the input of the root span but added for ease of access.
	// Represented as a JSON string.
	Request *string `protobuf:"bytes,4,opt,name=request" json:"request,omitempty" query:"request" params:"request"`
	// [Deprecated, please use `request_preview` instead.]
	// Response of the model/agent.
	// Equivalent to the output of the root span but added for ease of access.
	// Represented as a JSON string.
	Response *string `protobuf:"bytes,5,opt,name=response" json:"response,omitempty" query:"response" params:"response"`
	// A preview of the request to the model/agent represented as a JSON string. This is equivalent to the input of the root
	// span. This preview value is truncated to 10KB while the full request is stored in the trace data in blob storage.
	RequestPreview *string `protobuf:"bytes,12,opt,name=request_preview,json=requestPreview" json:"request_preview,omitempty" query:"request_preview" params:"request_preview"`
	// A preview of the request to the model/agent represented as a JSON string. This is equivalent to the output of the root
	// span. This preview value is truncated to 10KB while the full response is stored in the trace data in blob storage.
	ResponsePreview *string `protobuf:"bytes,13,opt,name=response_preview,json=responsePreview" json:"response_preview,omitempty" query:"response_preview" params:"response_preview"`
	// Start time of the trace
	RequestTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=request_time,json=requestTime" json:"request_time,omitempty" query:"request_time" params:"request_time"`
	// Execution time of the trace
	ExecutionDuration *durationpb.Duration `protobuf:"bytes,7,opt,name=execution_duration,json=executionDuration" json:"execution_duration,omitempty" query:"execution_duration" params:"execution_duration"`
	State             *TraceInfoV3_State   `protobuf:"varint,8,opt,name=state,enum=mlflow.TraceInfoV3_State" json:"state,omitempty" query:"state" params:"state"`
	// Metadata associated with the trace.
	// Examples include:
	//   - run_id: The ID of the mlflow Run (i.e. evaluation job) that produced the trace. May not be
	//     applicable in certain situations such as if the trace was created via interactive vibe checks)
	//   - model_id: The ID of the associated model that produced the trace.
	//   - dataset_id: The ID of the mlflow Dataset (usually used together with dataset_record_id)
	//   - dataset_record_id: The ID of the mlflow Dataset (usually used together with dataset_record_id)
	//   - session_id: The ID of the session (e.g. chat conversation) where the request came from
	TraceMetadata map[string]string `protobuf:"bytes,9,rep,name=trace_metadata,json=traceMetadata" json:"trace_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" query:"trace_metadata" params:"trace_metadata"`
	Assessments   []*Assessment     `protobuf:"bytes,10,rep,name=assessments" json:"assessments,omitempty" query:"assessments" params:"assessments"`
	// Mutable, user-defined tags for the trace, e.g. “question_topic”: “DBSQL”
	Tags map[string]string `protobuf:"bytes,11,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" query:"tags" params:"tags"`
}

func (x *TraceInfoV3) Reset() {
	*x = TraceInfoV3{}
	mi := &file_service_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceInfoV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceInfoV3) ProtoMessage() {}

func (x *TraceInfoV3) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceInfoV3.ProtoReflect.Descriptor instead.
func (*TraceInfoV3) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{62}
}

func (x *TraceInfoV3) GetTraceId() string {
	if x != nil && x.TraceId != nil {
		return *x.TraceId
	}
	return ""
}

func (x *TraceInfoV3) GetClientRequestId() string {
	if x != nil && x.ClientRequestId != nil {
		return *x.ClientRequestId
	}
	return ""
}

func (x *TraceInfoV3) GetTraceLocation() *TraceLocation {
	if x != nil {
		return x.TraceLocation
	}
	return nil
}

func (x *TraceInfoV3) GetRequest() string {
	if x != nil && x.Request != nil {
		return *x.Request
	}
	return ""
}

func (x *TraceInfoV3) GetResponse() string {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return ""
}

func (x *TraceInfoV3) GetRequestPreview() string {
	if x != nil && x.RequestPreview != nil {
		return *x.RequestPreview
	}
	return ""
}

func (x *TraceInfoV3) GetResponsePreview() string {
	if x != nil && x.ResponsePreview != nil {
		return *x.ResponsePreview
	}
	return ""
}

func (x *TraceInfoV3) GetRequestTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestTime
	}
	return nil
}

func (x *TraceInfoV3) GetExecutionDuration() *durationpb.Duration {
	if x != nil {
		return x.ExecutionDuration
	}
	return nil
}

func (x *TraceInfoV3) GetState() TraceInfoV3_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return TraceInfoV3_STATE_UNSPECIFIED
}

func (x *TraceInfoV3) GetTraceMetadata() map[string]string {
	if x != nil {
		return x.TraceMetadata
	}
	return nil
}

func (x *TraceInfoV3) GetAssessments() []*Assessment {
	if x != nil {
		return x.Assessments
	}
	return nil
}

func (x *TraceInfoV3) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type StartTraceV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The information for the trace being created.
	Trace *Trace `protobuf:"bytes,1,opt,name=trace" json:"trace,omitempty" query:"trace" params:"trace"`
}

func (x *StartTraceV3) Reset() {
	*x = StartTraceV3{}
	mi := &file_service_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTraceV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTraceV3) ProtoMessage() {}

func (x *StartTraceV3) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTraceV3.ProtoReflect.Descriptor instead.
func (*StartTraceV3) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{63}
}

func (x *StartTraceV3) GetTrace() *Trace {
	if x != nil {
		return x.Trace
	}
	return nil
}

// DatasetSummary. Represents a summary of information about a dataset.
type DatasetSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the experiment.
	ExperimentId *string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId" json:"experiment_id,omitempty" query:"experiment_id" params:"experiment_id"`
	// The name of the dataset. E.g. “my.uc.table@2” “nyc-taxi-dataset”, “fantastic-elk-3”
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty" query:"name" params:"name"`
	// Dataset digest, e.g. an md5 hash of the dataset that uniquely identifies it
	// within datasets of the same name.
	Digest *string `protobuf:"bytes,3,opt,name=digest" json:"digest,omitempty" query:"digest" params:"digest"`
	// Value of "context" tag if set for the given dataset.
	Context *string `protobuf:"bytes,4,opt,name=context" json:"context,omitempty" query:"context" params:"context"`
}

func (x *DatasetSummary) Reset() {
	*x = DatasetSummary{}
	mi := &file_service_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetSummary) ProtoMessage() {}

func (x *DatasetSummary) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetSummary.ProtoReflect.Descriptor instead.
func (*DatasetSummary) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{64}
}

func (x *DatasetSummary) GetExperimentId() string {
	if x != nil && x.ExperimentId != nil {
		return *x.ExperimentId
	}
	return ""
}

func (x *DatasetSummary) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DatasetSummary) GetDigest() string {
	if x != nil && x.Digest != nil {
		return *x.Digest
	}
	return ""
}

func (x *DatasetSummary) GetContext() string {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return ""
}

type SearchDatasets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of experiment IDs to search over.
	ExperimentIds []string `protobuf:"bytes,1,rep,name=experiment_ids,json=experimentIds" json:"experiment_ids,omitempty" query:"experiment_ids" params:"experiment_ids"`
}

func (x *SearchDatasets) Reset() {
	*x = SearchDatasets{}
	mi := &file_service_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchDatasets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDatasets) ProtoMessage() {}

func (x *SearchDatasets) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDatasets.ProtoReflect.Descriptor instead.
func (*SearchDatasets) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{65}
}

func (x *SearchDatasets) GetExperimentIds() []string {
	if x != nil {
		return x.ExperimentIds
	}
	return nil
}

type CreateLoggedModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the associated experiment.
	ExperimentId *string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId" json:"experiment_id,omitempty" query:"experiment_id" params:"experiment_id"`
	// Name of the model. Optional. If not specified, the backend will generate one.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty" query:"name" params:"name"`
	// The type of model, such as "Agent", "Classifier", "LLM".
	ModelType *string `protobuf:"bytes,3,opt,name=model_type,json=modelType" json:"model_type,omitempty" query:"model_type" params:"model_type"`
	// Run ID of the run that created this model.
	SourceRunId *string `protobuf:"bytes,4,opt,name=source_run_id,json=sourceRunId" json:"source_run_id,omitempty" query:"source_run_id" params:"source_run_id"`
	// LoggedModel params.
	Params []*LoggedModelParameter `protobuf:"bytes,5,rep,name=params" json:"params,omitempty" query:"params" params:"params"`
	// LoggedModel tags.
	Tags []*LoggedModelTag `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty" query:"tags" params:"tags"`
}

func (x *CreateLoggedModel) Reset() {
	*x = CreateLoggedModel{}
	mi := &file_service_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLoggedModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLoggedModel) ProtoMessage() {}

func (x *CreateLoggedModel) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLoggedModel.ProtoReflect.Descriptor instead.
func (*CreateLoggedModel) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{66}
}

func (x *CreateLoggedModel) GetExperimentId() string {
	if x != nil && x.ExperimentId != nil {
		return *x.ExperimentId
	}
	return ""
}

func (x *CreateLoggedModel) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateLoggedModel) GetModelType() string {
	if x != nil && x.ModelType != nil {
		return *x.ModelType
	}
	return ""
}

func (x *CreateLoggedModel) GetSourceRunId() string {
	if x != nil && x.SourceRunId != nil {
		return *x.SourceRunId
	}
	return ""
}

func (x *CreateLoggedModel) GetParams() []*LoggedModelParameter {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CreateLoggedModel) GetTags() []*LoggedModelTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type FinalizeLoggedModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the LoggedModel to finalize
	ModelId *string `protobuf:"bytes,1,opt,name=model_id,json=modelId" json:"model_id,omitempty" query:"model_id" params:"model_id"`
	// Whether or not the model is ready for use.
	// Valid values in this message: ENUM<LOGGED_MODEL_READY, LOGGED_MODEL_UPLOAD_FAILED>
	// ("LOGGED_MODEL_UPLOAD_FAILED" indicates that something went wrong when logging
	// the model weights / agent code)
	Status *LoggedModelStatus `protobuf:"varint,2,opt,name=status,enum=mlflow.LoggedModelStatus" json:"status,omitempty" query:"status" params:"status"`
}

func (x *FinalizeLoggedModel) Reset() {
	*x = FinalizeLoggedModel{}
	mi := &file_service_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeLoggedModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeLoggedModel) ProtoMessage() {}

func (x *FinalizeLoggedModel) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeLoggedModel.ProtoReflect.Descriptor instead.
func (*FinalizeLoggedModel) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{67}
}

func (x *FinalizeLoggedModel) GetModelId() string {
	if x != nil && x.ModelId != nil {
		return *x.ModelId
	}
	return ""
}

func (x *FinalizeLoggedModel) GetStatus() LoggedModelStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return LoggedModelStatus_LOGGED_MODEL_STATUS_UNSPECIFIED
}

type GetLoggedModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the LoggedModel to retrieve.
	ModelId *string `protobuf:"bytes,1,opt,name=model_id,json=modelId" json:"model_id,omitempty" query:"model_id" params:"model_id"`
}

func (x *GetLoggedModel) Reset() {
	*x = GetLoggedModel{}
	mi := &file_service_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLoggedModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoggedModel) ProtoMessage() {}

func (x *GetLoggedModel) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoggedModel.ProtoReflect.Descriptor instead.
func (*GetLoggedModel) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{68}
}

func (x *GetLoggedModel) GetModelId() string {
	if x != nil && x.ModelId != nil {
		return *x.ModelId
	}
	return ""
}

type DeleteLoggedModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the LoggedModel to delete.
	ModelId *string `protobuf:"bytes,1,opt,name=model_id,json=modelId" json:"model_id,omitempty" query:"model_id" params:"model_id"`
}

func (x *DeleteLoggedModel) Reset() {
	*x = DeleteLoggedModel{}
	mi := &file_service_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteLoggedModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLoggedModel) ProtoMessage() {}

func (x *DeleteLoggedModel) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLoggedModel.ProtoReflect.Descriptor instead.
func (*DeleteLoggedModel) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{69}
}

func (x *DeleteLoggedModel) GetModelId() string {
	if x != nil && x.ModelId != nil {
		return *x.ModelId
	}
	return ""
}

type SearchLoggedModels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of the Experiments in which to search for Logged Models.
	ExperimentIds []string `protobuf:"bytes,1,rep,name=experiment_ids,json=experimentIds" json:"experiment_ids,omitempty" query:"experiment_ids" params:"experiment_ids"`
	// A filter expression over Logged Model info and data that allows returning a subset of
	// Logged Models. The syntax is a subset of SQL that supports ANDing together binary operations
	// Example: “params.alpha < 0.3 AND metrics.accuracy > 0.9“.
	Filter *string `protobuf:"bytes,2,opt,name=filter" json:"filter,omitempty" query:"filter" params:"filter"`
	// List of datasets on which to apply the metrics filter clauses.
	// For example, a filter with `metrics.accuracy > 0.9` and dataset info with name "test_dataset"
	// means we will return all logged models with accuracy > 0.9 on the test_dataset.
	// Metric values from ANY dataset matching the criteria are considered.
	// If no datasets are specified, then metrics across all datasets are considered in the filter.
	Datasets []*SearchLoggedModels_Dataset `protobuf:"bytes,6,rep,name=datasets" json:"datasets,omitempty" query:"datasets" params:"datasets"`
	// Maximum number of Logged Models to return. Max threshold is 50.
	MaxResults *int32 `protobuf:"varint,3,opt,name=max_results,json=maxResults,def=50" json:"max_results,omitempty" query:"max_results" params:"max_results"`
	// List of columns for ordering the results, with additional fields for sorting criteria.
	OrderBy []*SearchLoggedModels_OrderBy `protobuf:"bytes,4,rep,name=order_by,json=orderBy" json:"order_by,omitempty" query:"order_by" params:"order_by"`
	// Token indicating the page of Logged Models to fetch.
	PageToken *string `protobuf:"bytes,5,opt,name=page_token,json=pageToken" json:"page_token,omitempty" query:"page_token" params:"page_token"`
}

// Default values for SearchLoggedModels fields.
const (
	Default_SearchLoggedModels_MaxResults = int32(50)
)

func (x *SearchLoggedModels) Reset() {
	*x = SearchLoggedModels{}
	mi := &file_service_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchLoggedModels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLoggedModels) ProtoMessage() {}

func (x *SearchLoggedModels) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLoggedModels.ProtoReflect.Descriptor instead.
func (*SearchLoggedModels) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{70}
}

func (x *SearchLoggedModels) GetExperimentIds() []string {
	if x != nil {
		return x.ExperimentIds
	}
	return nil
}

func (x *SearchLoggedModels) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *SearchLoggedModels) GetDatasets() []*SearchLoggedModels_Dataset {
	if x != nil {
		return x.Datasets
	}
	return nil
}

func (x *SearchLoggedModels) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return Default_SearchLoggedModels_MaxResults
}

func (x *SearchLoggedModels) GetOrderBy() []*SearchLoggedModels_OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *SearchLoggedModels) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type SetLoggedModelTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the LoggedModel to set the tag on.
	ModelId *string `protobuf:"bytes,1,opt,name=model_id,json=modelId" json:"model_id,omitempty" query:"model_id" params:"model_id"`
	// The tag key.
	Tags []*LoggedModelTag `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty" query:"tags" params:"tags"`
}

func (x *SetLoggedModelTags) Reset() {
	*x = SetLoggedModelTags{}
	mi := &file_service_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetLoggedModelTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLoggedModelTags) ProtoMessage() {}

func (x *SetLoggedModelTags) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLoggedModelTags.ProtoReflect.Descriptor instead.
func (*SetLoggedModelTags) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{71}
}

func (x *SetLoggedModelTags) GetModelId() string {
	if x != nil && x.ModelId != nil {
		return *x.ModelId
	}
	return ""
}

func (x *SetLoggedModelTags) GetTags() []*LoggedModelTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type DeleteLoggedModelTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the LoggedModel to delete the tag from.
	ModelId *string `protobuf:"bytes,1,opt,name=model_id,json=modelId" json:"model_id,omitempty" query:"model_id" params:"model_id"`
	// The tag key.
	TagKey *string `protobuf:"bytes,2,opt,name=tag_key,json=tagKey" json:"tag_key,omitempty" query:"tag_key" params:"tag_key"`
}

func (x *DeleteLoggedModelTag) Reset() {
	*x = DeleteLoggedModelTag{}
	mi := &file_service_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteLoggedModelTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLoggedModelTag) ProtoMessage() {}

func (x *DeleteLoggedModelTag) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLoggedModelTag.ProtoReflect.Descriptor instead.
func (*DeleteLoggedModelTag) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{72}
}

func (x *DeleteLoggedModelTag) GetModelId() string {
	if x != nil && x.ModelId != nil {
		return *x.ModelId
	}
	return ""
}

func (x *DeleteLoggedModelTag) GetTagKey() string {
	if x != nil && x.TagKey != nil {
		return *x.TagKey
	}
	return ""
}

type ListLoggedModelArtifacts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the LoggedModel for which to list the artifacts
	ModelId *string `protobuf:"bytes,1,opt,name=model_id,json=modelId" json:"model_id,omitempty" query:"model_id" params:"model_id"`
	// Filter artifacts matching this path (a relative path from the root artifact directory).
	ArtifactDirectoryPath *string `protobuf:"bytes,2,opt,name=artifact_directory_path,json=artifactDirectoryPath" json:"artifact_directory_path,omitempty" query:"artifact_directory_path" params:"artifact_directory_path"`
	// Token indicating the page of artifact results to fetch
	PageToken *string `protobuf:"bytes,3,opt,name=page_token,json=pageToken" json:"page_token,omitempty" query:"page_token" params:"page_token"`
}

func (x *ListLoggedModelArtifacts) Reset() {
	*x = ListLoggedModelArtifacts{}
	mi := &file_service_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLoggedModelArtifacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLoggedModelArtifacts) ProtoMessage() {}

func (x *ListLoggedModelArtifacts) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLoggedModelArtifacts.ProtoReflect.Descriptor instead.
func (*ListLoggedModelArtifacts) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{73}
}

func (x *ListLoggedModelArtifacts) GetModelId() string {
	if x != nil && x.ModelId != nil {
		return *x.ModelId
	}
	return ""
}

func (x *ListLoggedModelArtifacts) GetArtifactDirectoryPath() string {
	if x != nil && x.ArtifactDirectoryPath != nil {
		return *x.ArtifactDirectoryPath
	}
	return ""
}

func (x *ListLoggedModelArtifacts) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type LogLoggedModelParamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the logged model to log params for.
	ModelId *string `protobuf:"bytes,1,opt,name=model_id,json=modelId" json:"model_id,omitempty" query:"model_id" params:"model_id"`
	// Parameters attached to the model.
	Params []*LoggedModelParameter `protobuf:"bytes,2,rep,name=params" json:"params,omitempty" query:"params" params:"params"`
}

func (x *LogLoggedModelParamsRequest) Reset() {
	*x = LogLoggedModelParamsRequest{}
	mi := &file_service_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogLoggedModelParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLoggedModelParamsRequest) ProtoMessage() {}

func (x *LogLoggedModelParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLoggedModelParamsRequest.ProtoReflect.Descriptor instead.
func (*LogLoggedModelParamsRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{74}
}

func (x *LogLoggedModelParamsRequest) GetModelId() string {
	if x != nil && x.ModelId != nil {
		return *x.ModelId
	}
	return ""
}

func (x *LogLoggedModelParamsRequest) GetParams() []*LoggedModelParameter {
	if x != nil {
		return x.Params
	}
	return nil
}

// A LoggedModel message includes logged model attributes,
// tags, registration info, params, and linked run metrics.
type LoggedModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LoggedModel attributes such as model ID, status, tags, etc.
	Info *LoggedModelInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty" query:"info" params:"info"`
	// LoggedModel params and metrics.
	Data *LoggedModelData `protobuf:"bytes,2,opt,name=data" json:"data,omitempty" query:"data" params:"data"`
}

func (x *LoggedModel) Reset() {
	*x = LoggedModel{}
	mi := &file_service_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoggedModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggedModel) ProtoMessage() {}

func (x *LoggedModel) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggedModel.ProtoReflect.Descriptor instead.
func (*LoggedModel) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{75}
}

func (x *LoggedModel) GetInfo() *LoggedModelInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *LoggedModel) GetData() *LoggedModelData {
	if x != nil {
		return x.Data
	}
	return nil
}

// A LoggedModelInfo includes logged model attributes,
// tags, and registration info.
type LoggedModelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier for the model.
	ModelId *string `protobuf:"bytes,1,opt,name=model_id,json=modelId" json:"model_id,omitempty" query:"model_id" params:"model_id"`
	// The ID of the experiment that owns the model.
	ExperimentId *string `protobuf:"bytes,2,opt,name=experiment_id,json=experimentId" json:"experiment_id,omitempty" query:"experiment_id" params:"experiment_id"`
	// Name of the model.
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty" query:"name" params:"name"`
	// Timestamp when the model was created, in milliseconds since the UNIX epoch.
	CreationTimestampMs *int64 `protobuf:"varint,4,opt,name=creation_timestamp_ms,json=creationTimestampMs" json:"creation_timestamp_ms,omitempty" query:"creation_timestamp_ms" params:"creation_timestamp_ms"`
	// Timestamp when the model was last updated, in milliseconds since the UNIX epoch
	LastUpdatedTimestampMs *int64 `protobuf:"varint,5,opt,name=last_updated_timestamp_ms,json=lastUpdatedTimestampMs" json:"last_updated_timestamp_ms,omitempty" query:"last_updated_timestamp_ms" params:"last_updated_timestamp_ms"`
	// URI of the directory where model artifacts are stored.
	ArtifactUri *string `protobuf:"bytes,6,opt,name=artifact_uri,json=artifactUri" json:"artifact_uri,omitempty" query:"artifact_uri" params:"artifact_uri"`
	// Whether or not the model is ready for use.
	Status *LoggedModelStatus `protobuf:"varint,7,opt,name=status,enum=mlflow.LoggedModelStatus" json:"status,omitempty" query:"status" params:"status"`
	// The ID of the user or principal that created the model.
	CreatorId *int64 `protobuf:"varint,8,opt,name=creator_id,json=creatorId" json:"creator_id,omitempty" query:"creator_id" params:"creator_id"`
	// The type of model, such as "Agent", "Classifier", "LLM".
	ModelType *string `protobuf:"bytes,9,opt,name=model_type,json=modelType" json:"model_type,omitempty" query:"model_type" params:"model_type"`
	// Run ID of the run that created the model.
	SourceRunId *string `protobuf:"bytes,10,opt,name=source_run_id,json=sourceRunId" json:"source_run_id,omitempty" query:"source_run_id" params:"source_run_id"`
	// Details on the current status.
	StatusMessage *string `protobuf:"bytes,11,opt,name=status_message,json=statusMessage" json:"status_message,omitempty" query:"status_message" params:"status_message"`
	// Mutable String key-value pairs set on the model.
	Tags []*LoggedModelTag `protobuf:"bytes,12,rep,name=tags" json:"tags,omitempty" query:"tags" params:"tags"`
	// If the model has been promoted to the Model Registry, this field includes
	// information like the Registered Model name, Model Version number, etc.
	Registrations []*LoggedModelRegistrationInfo `protobuf:"bytes,13,rep,name=registrations" json:"registrations,omitempty" query:"registrations" params:"registrations"`
}

func (x *LoggedModelInfo) Reset() {
	*x = LoggedModelInfo{}
	mi := &file_service_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoggedModelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggedModelInfo) ProtoMessage() {}

func (x *LoggedModelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggedModelInfo.ProtoReflect.Descriptor instead.
func (*LoggedModelInfo) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{76}
}

func (x *LoggedModelInfo) GetModelId() string {
	if x != nil && x.ModelId != nil {
		return *x.ModelId
	}
	return ""
}

func (x *LoggedModelInfo) GetExperimentId() string {
	if x != nil && x.ExperimentId != nil {
		return *x.ExperimentId
	}
	return ""
}

func (x *LoggedModelInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *LoggedModelInfo) GetCreationTimestampMs() int64 {
	if x != nil && x.CreationTimestampMs != nil {
		return *x.CreationTimestampMs
	}
	return 0
}

func (x *LoggedModelInfo) GetLastUpdatedTimestampMs() int64 {
	if x != nil && x.LastUpdatedTimestampMs != nil {
		return *x.LastUpdatedTimestampMs
	}
	return 0
}

func (x *LoggedModelInfo) GetArtifactUri() string {
	if x != nil && x.ArtifactUri != nil {
		return *x.ArtifactUri
	}
	return ""
}

func (x *LoggedModelInfo) GetStatus() LoggedModelStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return LoggedModelStatus_LOGGED_MODEL_STATUS_UNSPECIFIED
}

func (x *LoggedModelInfo) GetCreatorId() int64 {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return 0
}

func (x *LoggedModelInfo) GetModelType() string {
	if x != nil && x.ModelType != nil {
		return *x.ModelType
	}
	return ""
}

func (x *LoggedModelInfo) GetSourceRunId() string {
	if x != nil && x.SourceRunId != nil {
		return *x.SourceRunId
	}
	return ""
}

func (x *LoggedModelInfo) GetStatusMessage() string {
	if x != nil && x.StatusMessage != nil {
		return *x.StatusMessage
	}
	return ""
}

func (x *LoggedModelInfo) GetTags() []*LoggedModelTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *LoggedModelInfo) GetRegistrations() []*LoggedModelRegistrationInfo {
	if x != nil {
		return x.Registrations
	}
	return nil
}

// Tag for a LoggedModel.
type LoggedModelTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tag key.
	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty" query:"key" params:"key"`
	// The tag value.
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty" query:"value" params:"value"`
}

func (x *LoggedModelTag) Reset() {
	*x = LoggedModelTag{}
	mi := &file_service_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoggedModelTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggedModelTag) ProtoMessage() {}

func (x *LoggedModelTag) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggedModelTag.ProtoReflect.Descriptor instead.
func (*LoggedModelTag) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{77}
}

func (x *LoggedModelTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *LoggedModelTag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// RegistrationInfo for a LoggedModel.
type LoggedModelRegistrationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Registered Model to which the model has been promoted.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty" query:"name" params:"name"`
	// The version number of the promoted model.
	Version *string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty" query:"version" params:"version"`
}

func (x *LoggedModelRegistrationInfo) Reset() {
	*x = LoggedModelRegistrationInfo{}
	mi := &file_service_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoggedModelRegistrationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggedModelRegistrationInfo) ProtoMessage() {}

func (x *LoggedModelRegistrationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggedModelRegistrationInfo.ProtoReflect.Descriptor instead.
func (*LoggedModelRegistrationInfo) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{78}
}

func (x *LoggedModelRegistrationInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *LoggedModelRegistrationInfo) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

// A LoggedModelData message includes logged model params and linked metrics.
type LoggedModelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Immutable String key-value pairs of the model.
	Params []*LoggedModelParameter `protobuf:"bytes,1,rep,name=params" json:"params,omitempty" query:"params" params:"params"`
	// Performance metrics linked to the model.
	Metrics []*Metric `protobuf:"bytes,2,rep,name=metrics" json:"metrics,omitempty" query:"metrics" params:"metrics"`
}

func (x *LoggedModelData) Reset() {
	*x = LoggedModelData{}
	mi := &file_service_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoggedModelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggedModelData) ProtoMessage() {}

func (x *LoggedModelData) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggedModelData.ProtoReflect.Descriptor instead.
func (*LoggedModelData) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{79}
}

func (x *LoggedModelData) GetParams() []*LoggedModelParameter {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *LoggedModelData) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// Parameter associated with a LoggedModel.
type LoggedModelParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key identifying this param.
	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty" query:"key" params:"key"`
	// Value associated with this param.
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty" query:"value" params:"value"`
}

func (x *LoggedModelParameter) Reset() {
	*x = LoggedModelParameter{}
	mi := &file_service_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoggedModelParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggedModelParameter) ProtoMessage() {}

func (x *LoggedModelParameter) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggedModelParameter.ProtoReflect.Descriptor instead.
func (*LoggedModelParameter) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{80}
}

func (x *LoggedModelParameter) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *LoggedModelParameter) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type SearchTracesV3Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of MLflow experiments to search over.
	Locations []*TraceLocation `protobuf:"bytes,1,rep,name=locations" json:"locations,omitempty" query:"locations" params:"locations"`
	// A filter expression over trace attributes and tags that allows returning a subset of
	// traces. The syntax is a subset of SQL that supports ANDing together binary operations
	// Example: “trace.status = 'OK' and trace.timestamp_ms > 1711089570679“.
	Filter *string `protobuf:"bytes,2,opt,name=filter" json:"filter,omitempty" query:"filter" params:"filter"`
	// Maximum number of traces desired. Max threshold is 500.
	MaxResults *int32 `protobuf:"varint,3,opt,name=max_results,json=maxResults,def=100" json:"max_results,omitempty" query:"max_results" params:"max_results"`
	// List of columns for ordering the results, e.g. “["timestamp_ms DESC"]“.
	OrderBy []string `protobuf:"bytes,4,rep,name=order_by,json=orderBy" json:"order_by,omitempty" query:"order_by" params:"order_by"`
	// Token indicating the page of traces to fetch.
	PageToken *string `protobuf:"bytes,5,opt,name=page_token,json=pageToken" json:"page_token,omitempty" query:"page_token" params:"page_token"`
}

// Default values for SearchTracesV3Request fields.
const (
	Default_SearchTracesV3Request_MaxResults = int32(100)
)

func (x *SearchTracesV3Request) Reset() {
	*x = SearchTracesV3Request{}
	mi := &file_service_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchTracesV3Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTracesV3Request) ProtoMessage() {}

func (x *SearchTracesV3Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTracesV3Request.ProtoReflect.Descriptor instead.
func (*SearchTracesV3Request) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{81}
}

func (x *SearchTracesV3Request) GetLocations() []*TraceLocation {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *SearchTracesV3Request) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *SearchTracesV3Request) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return Default_SearchTracesV3Request_MaxResults
}

func (x *SearchTracesV3Request) GetOrderBy() []string {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *SearchTracesV3Request) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type CreateExperiment_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the experiment.
	ExperimentId *string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId" json:"experiment_id,omitempty" query:"experiment_id" params:"experiment_id"`
}

func (x *CreateExperiment_Response) Reset() {
	*x = CreateExperiment_Response{}
	mi := &file_service_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateExperiment_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExperiment_Response) ProtoMessage() {}

func (x *CreateExperiment_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExperiment_Response.ProtoReflect.Descriptor instead.
func (*CreateExperiment_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CreateExperiment_Response) GetExperimentId() string {
	if x != nil && x.ExperimentId != nil {
		return *x.ExperimentId
	}
	return ""
}

type SearchExperiments_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Experiments that match the search criteria
	Experiments []*Experiment `protobuf:"bytes,1,rep,name=experiments" json:"experiments,omitempty" query:"experiments" params:"experiments"`
	// Token that can be used to retrieve the next page of experiments.
	// An empty token means that no more experiments are available for retrieval.
	NextPageToken *string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty" query:"next_page_token" params:"next_page_token"`
}

func (x *SearchExperiments_Response) Reset() {
	*x = SearchExperiments_Response{}
	mi := &file_service_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchExperiments_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchExperiments_Response) ProtoMessage() {}

func (x *SearchExperiments_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchExperiments_Response.ProtoReflect.Descriptor instead.
func (*SearchExperiments_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{16, 0}
}

func (x *SearchExperiments_Response) GetExperiments() []*Experiment {
	if x != nil {
		return x.Experiments
	}
	return nil
}

func (x *SearchExperiments_Response) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

type GetExperiment_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Experiment details.
	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment" json:"experiment,omitempty" query:"experiment" params:"experiment"`
}

func (x *GetExperiment_Response) Reset() {
	*x = GetExperiment_Response{}
	mi := &file_service_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExperiment_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperiment_Response) ProtoMessage() {}

func (x *GetExperiment_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperiment_Response.ProtoReflect.Descriptor instead.
func (*GetExperiment_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{17, 0}
}

func (x *GetExperiment_Response) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type DeleteExperiment_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteExperiment_Response) Reset() {
	*x = DeleteExperiment_Response{}
	mi := &file_service_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteExperiment_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperiment_Response) ProtoMessage() {}

func (x *DeleteExperiment_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperiment_Response.ProtoReflect.Descriptor instead.
func (*DeleteExperiment_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{18, 0}
}

type RestoreExperiment_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestoreExperiment_Response) Reset() {
	*x = RestoreExperiment_Response{}
	mi := &file_service_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreExperiment_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreExperiment_Response) ProtoMessage() {}

func (x *RestoreExperiment_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreExperiment_Response.ProtoReflect.Descriptor instead.
func (*RestoreExperiment_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{19, 0}
}

type UpdateExperiment_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateExperiment_Response) Reset() {
	*x = UpdateExperiment_Response{}
	mi := &file_service_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateExperiment_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExperiment_Response) ProtoMessage() {}

func (x *UpdateExperiment_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExperiment_Response.ProtoReflect.Descriptor instead.
func (*UpdateExperiment_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{20, 0}
}

type CreateRun_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The newly created run.
	Run *Run `protobuf:"bytes,1,opt,name=run" json:"run,omitempty" query:"run" params:"run"`
}

func (x *CreateRun_Response) Reset() {
	*x = CreateRun_Response{}
	mi := &file_service_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRun_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRun_Response) ProtoMessage() {}

func (x *CreateRun_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRun_Response.ProtoReflect.Descriptor instead.
func (*CreateRun_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{21, 0}
}

func (x *CreateRun_Response) GetRun() *Run {
	if x != nil {
		return x.Run
	}
	return nil
}

type UpdateRun_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updated metadata of the run.
	RunInfo *RunInfo `protobuf:"bytes,1,opt,name=run_info,json=runInfo" json:"run_info,omitempty" query:"run_info" params:"run_info"`
}

func (x *UpdateRun_Response) Reset() {
	*x = UpdateRun_Response{}
	mi := &file_service_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRun_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRun_Response) ProtoMessage() {}

func (x *UpdateRun_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRun_Response.ProtoReflect.Descriptor instead.
func (*UpdateRun_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{22, 0}
}

func (x *UpdateRun_Response) GetRunInfo() *RunInfo {
	if x != nil {
		return x.RunInfo
	}
	return nil
}

type DeleteRun_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRun_Response) Reset() {
	*x = DeleteRun_Response{}
	mi := &file_service_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRun_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRun_Response) ProtoMessage() {}

func (x *DeleteRun_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRun_Response.ProtoReflect.Descriptor instead.
func (*DeleteRun_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{23, 0}
}

type RestoreRun_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestoreRun_Response) Reset() {
	*x = RestoreRun_Response{}
	mi := &file_service_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreRun_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreRun_Response) ProtoMessage() {}

func (x *RestoreRun_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreRun_Response.ProtoReflect.Descriptor instead.
func (*RestoreRun_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{24, 0}
}

type LogMetric_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogMetric_Response) Reset() {
	*x = LogMetric_Response{}
	mi := &file_service_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogMetric_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMetric_Response) ProtoMessage() {}

func (x *LogMetric_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMetric_Response.ProtoReflect.Descriptor instead.
func (*LogMetric_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{25, 0}
}

type LogParam_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogParam_Response) Reset() {
	*x = LogParam_Response{}
	mi := &file_service_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogParam_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogParam_Response) ProtoMessage() {}

func (x *LogParam_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogParam_Response.ProtoReflect.Descriptor instead.
func (*LogParam_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{26, 0}
}

type SetExperimentTag_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetExperimentTag_Response) Reset() {
	*x = SetExperimentTag_Response{}
	mi := &file_service_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetExperimentTag_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetExperimentTag_Response) ProtoMessage() {}

func (x *SetExperimentTag_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetExperimentTag_Response.ProtoReflect.Descriptor instead.
func (*SetExperimentTag_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{27, 0}
}

type SetTag_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTag_Response) Reset() {
	*x = SetTag_Response{}
	mi := &file_service_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTag_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTag_Response) ProtoMessage() {}

func (x *SetTag_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTag_Response.ProtoReflect.Descriptor instead.
func (*SetTag_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{28, 0}
}

type DeleteTag_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTag_Response) Reset() {
	*x = DeleteTag_Response{}
	mi := &file_service_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTag_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTag_Response) ProtoMessage() {}

func (x *DeleteTag_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTag_Response.ProtoReflect.Descriptor instead.
func (*DeleteTag_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{29, 0}
}

type GetRun_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Run metadata (name, start time, etc) and data (metrics, params, and tags).
	Run *Run `protobuf:"bytes,1,opt,name=run" json:"run,omitempty" query:"run" params:"run"`
}

func (x *GetRun_Response) Reset() {
	*x = GetRun_Response{}
	mi := &file_service_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRun_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRun_Response) ProtoMessage() {}

func (x *GetRun_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRun_Response.ProtoReflect.Descriptor instead.
func (*GetRun_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{30, 0}
}

func (x *GetRun_Response) GetRun() *Run {
	if x != nil {
		return x.Run
	}
	return nil
}

type SearchRuns_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Runs that match the search criteria.
	Runs          []*Run  `protobuf:"bytes,1,rep,name=runs" json:"runs,omitempty" query:"runs" params:"runs"`
	NextPageToken *string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty" query:"next_page_token" params:"next_page_token"`
}

func (x *SearchRuns_Response) Reset() {
	*x = SearchRuns_Response{}
	mi := &file_service_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRuns_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRuns_Response) ProtoMessage() {}

func (x *SearchRuns_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRuns_Response.ProtoReflect.Descriptor instead.
func (*SearchRuns_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{31, 0}
}

func (x *SearchRuns_Response) GetRuns() []*Run {
	if x != nil {
		return x.Runs
	}
	return nil
}

func (x *SearchRuns_Response) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

type ListArtifacts_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Root artifact directory for the run.
	RootUri *string `protobuf:"bytes,1,opt,name=root_uri,json=rootUri" json:"root_uri,omitempty" query:"root_uri" params:"root_uri"`
	// File location and metadata for artifacts.
	Files []*FileInfo `protobuf:"bytes,2,rep,name=files" json:"files,omitempty" query:"files" params:"files"`
	// Token that can be used to retrieve the next page of artifact results
	NextPageToken *string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty" query:"next_page_token" params:"next_page_token"`
}

func (x *ListArtifacts_Response) Reset() {
	*x = ListArtifacts_Response{}
	mi := &file_service_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListArtifacts_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArtifacts_Response) ProtoMessage() {}

func (x *ListArtifacts_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArtifacts_Response.ProtoReflect.Descriptor instead.
func (*ListArtifacts_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{32, 0}
}

func (x *ListArtifacts_Response) GetRootUri() string {
	if x != nil && x.RootUri != nil {
		return *x.RootUri
	}
	return ""
}

func (x *ListArtifacts_Response) GetFiles() []*FileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *ListArtifacts_Response) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

type GetMetricHistory_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All logged values for this metric.
	Metrics []*Metric `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty" query:"metrics" params:"metrics"`
	// Token that can be used to issue a query for the next page of metric history values.
	// A missing token indicates that no additional metrics are available to fetch.
	NextPageToken *string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty" query:"next_page_token" params:"next_page_token"`
}

func (x *GetMetricHistory_Response) Reset() {
	*x = GetMetricHistory_Response{}
	mi := &file_service_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMetricHistory_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricHistory_Response) ProtoMessage() {}

func (x *GetMetricHistory_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricHistory_Response.ProtoReflect.Descriptor instead.
func (*GetMetricHistory_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{34, 0}
}

func (x *GetMetricHistory_Response) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *GetMetricHistory_Response) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

type GetMetricHistoryBulkInterval_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of metrics representing history of values and metadata.
	Metrics []*MetricWithRunId `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty" query:"metrics" params:"metrics"`
}

func (x *GetMetricHistoryBulkInterval_Response) Reset() {
	*x = GetMetricHistoryBulkInterval_Response{}
	mi := &file_service_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMetricHistoryBulkInterval_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricHistoryBulkInterval_Response) ProtoMessage() {}

func (x *GetMetricHistoryBulkInterval_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricHistoryBulkInterval_Response.ProtoReflect.Descriptor instead.
func (*GetMetricHistoryBulkInterval_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{36, 0}
}

func (x *GetMetricHistoryBulkInterval_Response) GetMetrics() []*MetricWithRunId {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type LogBatch_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogBatch_Response) Reset() {
	*x = LogBatch_Response{}
	mi := &file_service_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogBatch_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogBatch_Response) ProtoMessage() {}

func (x *LogBatch_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogBatch_Response.ProtoReflect.Descriptor instead.
func (*LogBatch_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{37, 0}
}

type LogModel_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogModel_Response) Reset() {
	*x = LogModel_Response{}
	mi := &file_service_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogModel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogModel_Response) ProtoMessage() {}

func (x *LogModel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogModel_Response.ProtoReflect.Descriptor instead.
func (*LogModel_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{38, 0}
}

type LogInputs_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogInputs_Response) Reset() {
	*x = LogInputs_Response{}
	mi := &file_service_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogInputs_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogInputs_Response) ProtoMessage() {}

func (x *LogInputs_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogInputs_Response.ProtoReflect.Descriptor instead.
func (*LogInputs_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{39, 0}
}

type LogOutputs_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogOutputs_Response) Reset() {
	*x = LogOutputs_Response{}
	mi := &file_service_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogOutputs_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogOutputs_Response) ProtoMessage() {}

func (x *LogOutputs_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogOutputs_Response.ProtoReflect.Descriptor instead.
func (*LogOutputs_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{40, 0}
}

type GetExperimentByName_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Experiment details.
	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment" json:"experiment,omitempty" query:"experiment" params:"experiment"`
}

func (x *GetExperimentByName_Response) Reset() {
	*x = GetExperimentByName_Response{}
	mi := &file_service_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExperimentByName_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentByName_Response) ProtoMessage() {}

func (x *GetExperimentByName_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentByName_Response.ProtoReflect.Descriptor instead.
func (*GetExperimentByName_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{41, 0}
}

func (x *GetExperimentByName_Response) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type CreateAssessment_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The created assessment.
	Assessment *Assessment `protobuf:"bytes,1,opt,name=assessment" json:"assessment,omitempty" query:"assessment" params:"assessment"`
}

func (x *CreateAssessment_Response) Reset() {
	*x = CreateAssessment_Response{}
	mi := &file_service_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAssessment_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAssessment_Response) ProtoMessage() {}

func (x *CreateAssessment_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAssessment_Response.ProtoReflect.Descriptor instead.
func (*CreateAssessment_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{44, 0}
}

func (x *CreateAssessment_Response) GetAssessment() *Assessment {
	if x != nil {
		return x.Assessment
	}
	return nil
}

type UpdateAssessment_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Assessment after the update.
	Assessment *Assessment `protobuf:"bytes,1,opt,name=assessment" json:"assessment,omitempty" query:"assessment" params:"assessment"`
}

func (x *UpdateAssessment_Response) Reset() {
	*x = UpdateAssessment_Response{}
	mi := &file_service_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAssessment_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssessment_Response) ProtoMessage() {}

func (x *UpdateAssessment_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssessment_Response.ProtoReflect.Descriptor instead.
func (*UpdateAssessment_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{45, 0}
}

func (x *UpdateAssessment_Response) GetAssessment() *Assessment {
	if x != nil {
		return x.Assessment
	}
	return nil
}

type DeleteAssessment_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAssessment_Response) Reset() {
	*x = DeleteAssessment_Response{}
	mi := &file_service_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAssessment_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAssessment_Response) ProtoMessage() {}

func (x *DeleteAssessment_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAssessment_Response.ProtoReflect.Descriptor instead.
func (*DeleteAssessment_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{46, 0}
}

type StartTrace_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The newly created trace.
	TraceInfo *TraceInfo `protobuf:"bytes,1,opt,name=trace_info,json=traceInfo" json:"trace_info,omitempty" query:"trace_info" params:"trace_info"`
}

func (x *StartTrace_Response) Reset() {
	*x = StartTrace_Response{}
	mi := &file_service_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTrace_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTrace_Response) ProtoMessage() {}

func (x *StartTrace_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTrace_Response.ProtoReflect.Descriptor instead.
func (*StartTrace_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{50, 0}
}

func (x *StartTrace_Response) GetTraceInfo() *TraceInfo {
	if x != nil {
		return x.TraceInfo
	}
	return nil
}

type EndTrace_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated trace.
	TraceInfo *TraceInfo `protobuf:"bytes,1,opt,name=trace_info,json=traceInfo" json:"trace_info,omitempty" query:"trace_info" params:"trace_info"`
}

func (x *EndTrace_Response) Reset() {
	*x = EndTrace_Response{}
	mi := &file_service_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndTrace_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndTrace_Response) ProtoMessage() {}

func (x *EndTrace_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndTrace_Response.ProtoReflect.Descriptor instead.
func (*EndTrace_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{51, 0}
}

func (x *EndTrace_Response) GetTraceInfo() *TraceInfo {
	if x != nil {
		return x.TraceInfo
	}
	return nil
}

type GetTraceInfo_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata of the requested trace.
	TraceInfo *TraceInfo `protobuf:"bytes,1,opt,name=trace_info,json=traceInfo" json:"trace_info,omitempty" query:"trace_info" params:"trace_info"`
}

func (x *GetTraceInfo_Response) Reset() {
	*x = GetTraceInfo_Response{}
	mi := &file_service_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTraceInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceInfo_Response) ProtoMessage() {}

func (x *GetTraceInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceInfo_Response.ProtoReflect.Descriptor instead.
func (*GetTraceInfo_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{52, 0}
}

func (x *GetTraceInfo_Response) GetTraceInfo() *TraceInfo {
	if x != nil {
		return x.TraceInfo
	}
	return nil
}

type GetTraceInfoV3_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trace *Trace `protobuf:"bytes,1,opt,name=trace" json:"trace,omitempty" query:"trace" params:"trace"`
}

func (x *GetTraceInfoV3_Response) Reset() {
	*x = GetTraceInfoV3_Response{}
	mi := &file_service_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTraceInfoV3_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceInfoV3_Response) ProtoMessage() {}

func (x *GetTraceInfoV3_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceInfoV3_Response.ProtoReflect.Descriptor instead.
func (*GetTraceInfoV3_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{53, 0}
}

func (x *GetTraceInfoV3_Response) GetTrace() *Trace {
	if x != nil {
		return x.Trace
	}
	return nil
}

type SearchTraces_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information about traces that match the search criteria.
	Traces        []*TraceInfo `protobuf:"bytes,1,rep,name=traces" json:"traces,omitempty" query:"traces" params:"traces"`
	NextPageToken *string      `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty" query:"next_page_token" params:"next_page_token"`
}

func (x *SearchTraces_Response) Reset() {
	*x = SearchTraces_Response{}
	mi := &file_service_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchTraces_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTraces_Response) ProtoMessage() {}

func (x *SearchTraces_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTraces_Response.ProtoReflect.Descriptor instead.
func (*SearchTraces_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{54, 0}
}

func (x *SearchTraces_Response) GetTraces() []*TraceInfo {
	if x != nil {
		return x.Traces
	}
	return nil
}

func (x *SearchTraces_Response) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

type SearchUnifiedTraces_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information about traces that match the search criteria.
	Traces        []*TraceInfo `protobuf:"bytes,1,rep,name=traces" json:"traces,omitempty" query:"traces" params:"traces"`
	NextPageToken *string      `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty" query:"next_page_token" params:"next_page_token"`
}

func (x *SearchUnifiedTraces_Response) Reset() {
	*x = SearchUnifiedTraces_Response{}
	mi := &file_service_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchUnifiedTraces_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUnifiedTraces_Response) ProtoMessage() {}

func (x *SearchUnifiedTraces_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUnifiedTraces_Response.ProtoReflect.Descriptor instead.
func (*SearchUnifiedTraces_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{55, 0}
}

func (x *SearchUnifiedTraces_Response) GetTraces() []*TraceInfo {
	if x != nil {
		return x.Traces
	}
	return nil
}

func (x *SearchUnifiedTraces_Response) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

type GetOnlineTraceDetails_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Return trace JSON in string form
	// Note: we may change this to a TraceData object in the future
	TraceData *string `protobuf:"bytes,1,opt,name=trace_data,json=traceData" json:"trace_data,omitempty" query:"trace_data" params:"trace_data"`
}

func (x *GetOnlineTraceDetails_Response) Reset() {
	*x = GetOnlineTraceDetails_Response{}
	mi := &file_service_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOnlineTraceDetails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnlineTraceDetails_Response) ProtoMessage() {}

func (x *GetOnlineTraceDetails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnlineTraceDetails_Response.ProtoReflect.Descriptor instead.
func (*GetOnlineTraceDetails_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{56, 0}
}

func (x *GetOnlineTraceDetails_Response) GetTraceData() string {
	if x != nil && x.TraceData != nil {
		return *x.TraceData
	}
	return ""
}

type DeleteTraces_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TracesDeleted *int32 `protobuf:"varint,1,opt,name=traces_deleted,json=tracesDeleted" json:"traces_deleted,omitempty" query:"traces_deleted" params:"traces_deleted"`
}

func (x *DeleteTraces_Response) Reset() {
	*x = DeleteTraces_Response{}
	mi := &file_service_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTraces_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTraces_Response) ProtoMessage() {}

func (x *DeleteTraces_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTraces_Response.ProtoReflect.Descriptor instead.
func (*DeleteTraces_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{57, 0}
}

func (x *DeleteTraces_Response) GetTracesDeleted() int32 {
	if x != nil && x.TracesDeleted != nil {
		return *x.TracesDeleted
	}
	return 0
}

type SetTraceTag_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTraceTag_Response) Reset() {
	*x = SetTraceTag_Response{}
	mi := &file_service_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTraceTag_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTraceTag_Response) ProtoMessage() {}

func (x *SetTraceTag_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTraceTag_Response.ProtoReflect.Descriptor instead.
func (*SetTraceTag_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{58, 0}
}

type DeleteTraceTag_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTraceTag_Response) Reset() {
	*x = DeleteTraceTag_Response{}
	mi := &file_service_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTraceTag_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTraceTag_Response) ProtoMessage() {}

func (x *DeleteTraceTag_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTraceTag_Response.ProtoReflect.Descriptor instead.
func (*DeleteTraceTag_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{59, 0}
}

type TraceLocation_MlflowExperimentLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MLflow experiment ID which is the ACL container holding the trace.
	ExperimentId *string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId" json:"experiment_id,omitempty" query:"experiment_id" params:"experiment_id"`
}

func (x *TraceLocation_MlflowExperimentLocation) Reset() {
	*x = TraceLocation_MlflowExperimentLocation{}
	mi := &file_service_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceLocation_MlflowExperimentLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceLocation_MlflowExperimentLocation) ProtoMessage() {}

func (x *TraceLocation_MlflowExperimentLocation) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceLocation_MlflowExperimentLocation.ProtoReflect.Descriptor instead.
func (*TraceLocation_MlflowExperimentLocation) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{61, 0}
}

func (x *TraceLocation_MlflowExperimentLocation) GetExperimentId() string {
	if x != nil && x.ExperimentId != nil {
		return *x.ExperimentId
	}
	return ""
}

type TraceLocation_InferenceTableLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Full inference table name in the form of catalog.schema.table_name
	FullTableName *string `protobuf:"bytes,1,opt,name=full_table_name,json=fullTableName" json:"full_table_name,omitempty" query:"full_table_name" params:"full_table_name"`
}

func (x *TraceLocation_InferenceTableLocation) Reset() {
	*x = TraceLocation_InferenceTableLocation{}
	mi := &file_service_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceLocation_InferenceTableLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceLocation_InferenceTableLocation) ProtoMessage() {}

func (x *TraceLocation_InferenceTableLocation) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceLocation_InferenceTableLocation.ProtoReflect.Descriptor instead.
func (*TraceLocation_InferenceTableLocation) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{61, 1}
}

func (x *TraceLocation_InferenceTableLocation) GetFullTableName() string {
	if x != nil && x.FullTableName != nil {
		return *x.FullTableName
	}
	return ""
}

type StartTraceV3_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The created trace information.
	Trace *Trace `protobuf:"bytes,1,opt,name=trace" json:"trace,omitempty" query:"trace" params:"trace"`
}

func (x *StartTraceV3_Response) Reset() {
	*x = StartTraceV3_Response{}
	mi := &file_service_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTraceV3_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTraceV3_Response) ProtoMessage() {}

func (x *StartTraceV3_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTraceV3_Response.ProtoReflect.Descriptor instead.
func (*StartTraceV3_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{63, 0}
}

func (x *StartTraceV3_Response) GetTrace() *Trace {
	if x != nil {
		return x.Trace
	}
	return nil
}

type SearchDatasets_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Return the summary for most recently created N datasets, as configured in backend
	DatasetSummaries []*DatasetSummary `protobuf:"bytes,1,rep,name=dataset_summaries,json=datasetSummaries" json:"dataset_summaries,omitempty" query:"dataset_summaries" params:"dataset_summaries"`
}

func (x *SearchDatasets_Response) Reset() {
	*x = SearchDatasets_Response{}
	mi := &file_service_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchDatasets_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDatasets_Response) ProtoMessage() {}

func (x *SearchDatasets_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDatasets_Response.ProtoReflect.Descriptor instead.
func (*SearchDatasets_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{65, 0}
}

func (x *SearchDatasets_Response) GetDatasetSummaries() []*DatasetSummary {
	if x != nil {
		return x.DatasetSummaries
	}
	return nil
}

type CreateLoggedModel_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The newly created LoggedModel.
	Model *LoggedModel `protobuf:"bytes,1,opt,name=model" json:"model,omitempty" query:"model" params:"model"`
}

func (x *CreateLoggedModel_Response) Reset() {
	*x = CreateLoggedModel_Response{}
	mi := &file_service_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLoggedModel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLoggedModel_Response) ProtoMessage() {}

func (x *CreateLoggedModel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLoggedModel_Response.ProtoReflect.Descriptor instead.
func (*CreateLoggedModel_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{66, 0}
}

func (x *CreateLoggedModel_Response) GetModel() *LoggedModel {
	if x != nil {
		return x.Model
	}
	return nil
}

type FinalizeLoggedModel_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated LoggedModel.
	Model *LoggedModel `protobuf:"bytes,1,opt,name=model" json:"model,omitempty" query:"model" params:"model"`
}

func (x *FinalizeLoggedModel_Response) Reset() {
	*x = FinalizeLoggedModel_Response{}
	mi := &file_service_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeLoggedModel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeLoggedModel_Response) ProtoMessage() {}

func (x *FinalizeLoggedModel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeLoggedModel_Response.ProtoReflect.Descriptor instead.
func (*FinalizeLoggedModel_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{67, 0}
}

func (x *FinalizeLoggedModel_Response) GetModel() *LoggedModel {
	if x != nil {
		return x.Model
	}
	return nil
}

type GetLoggedModel_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The retrieved LoggedModel.
	Model *LoggedModel `protobuf:"bytes,1,opt,name=model" json:"model,omitempty" query:"model" params:"model"`
}

func (x *GetLoggedModel_Response) Reset() {
	*x = GetLoggedModel_Response{}
	mi := &file_service_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLoggedModel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoggedModel_Response) ProtoMessage() {}

func (x *GetLoggedModel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoggedModel_Response.ProtoReflect.Descriptor instead.
func (*GetLoggedModel_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{68, 0}
}

func (x *GetLoggedModel_Response) GetModel() *LoggedModel {
	if x != nil {
		return x.Model
	}
	return nil
}

type DeleteLoggedModel_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteLoggedModel_Response) Reset() {
	*x = DeleteLoggedModel_Response{}
	mi := &file_service_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteLoggedModel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLoggedModel_Response) ProtoMessage() {}

func (x *DeleteLoggedModel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLoggedModel_Response.ProtoReflect.Descriptor instead.
func (*DeleteLoggedModel_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{69, 0}
}

type SearchLoggedModels_Dataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the dataset.
	DatasetName *string `protobuf:"bytes,1,opt,name=dataset_name,json=datasetName" json:"dataset_name,omitempty" query:"dataset_name" params:"dataset_name"`
	// The digest of the dataset.
	DatasetDigest *string `protobuf:"bytes,2,opt,name=dataset_digest,json=datasetDigest" json:"dataset_digest,omitempty" query:"dataset_digest" params:"dataset_digest"`
}

func (x *SearchLoggedModels_Dataset) Reset() {
	*x = SearchLoggedModels_Dataset{}
	mi := &file_service_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchLoggedModels_Dataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLoggedModels_Dataset) ProtoMessage() {}

func (x *SearchLoggedModels_Dataset) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLoggedModels_Dataset.ProtoReflect.Descriptor instead.
func (*SearchLoggedModels_Dataset) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{70, 0}
}

func (x *SearchLoggedModels_Dataset) GetDatasetName() string {
	if x != nil && x.DatasetName != nil {
		return *x.DatasetName
	}
	return ""
}

func (x *SearchLoggedModels_Dataset) GetDatasetDigest() string {
	if x != nil && x.DatasetDigest != nil {
		return *x.DatasetDigest
	}
	return ""
}

type SearchLoggedModels_OrderBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the field to order by, e.g. "metrics.accuracy".
	FieldName *string `protobuf:"bytes,1,opt,name=field_name,json=fieldName" json:"field_name,omitempty" query:"field_name" params:"field_name"`
	// Whether the order is ascending or not.
	Ascending *bool `protobuf:"varint,2,opt,name=ascending,def=1" json:"ascending,omitempty" query:"ascending" params:"ascending"`
	// If “field_name“ refers to a metric, this field specifies the name of the dataset
	// associated with the metric. Only metrics associated with the specified dataset name will be
	// considered for ordering. This field may only be set if “field_name“ refers to a metric.
	DatasetName *string `protobuf:"bytes,3,opt,name=dataset_name,json=datasetName" json:"dataset_name,omitempty" query:"dataset_name" params:"dataset_name"`
	// If “field_name“ refers to a metric, this field specifies the digest of the dataset
	// associated with the metric. Only metrics associated with the specified dataset name
	// and digest will be considered for ordering. This field may only be set if “dataset_name“
	// is also set.
	DatasetDigest *string `protobuf:"bytes,4,opt,name=dataset_digest,json=datasetDigest" json:"dataset_digest,omitempty" query:"dataset_digest" params:"dataset_digest"`
}

// Default values for SearchLoggedModels_OrderBy fields.
const (
	Default_SearchLoggedModels_OrderBy_Ascending = bool(true)
)

func (x *SearchLoggedModels_OrderBy) Reset() {
	*x = SearchLoggedModels_OrderBy{}
	mi := &file_service_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchLoggedModels_OrderBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLoggedModels_OrderBy) ProtoMessage() {}

func (x *SearchLoggedModels_OrderBy) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLoggedModels_OrderBy.ProtoReflect.Descriptor instead.
func (*SearchLoggedModels_OrderBy) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{70, 1}
}

func (x *SearchLoggedModels_OrderBy) GetFieldName() string {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return ""
}

func (x *SearchLoggedModels_OrderBy) GetAscending() bool {
	if x != nil && x.Ascending != nil {
		return *x.Ascending
	}
	return Default_SearchLoggedModels_OrderBy_Ascending
}

func (x *SearchLoggedModels_OrderBy) GetDatasetName() string {
	if x != nil && x.DatasetName != nil {
		return *x.DatasetName
	}
	return ""
}

func (x *SearchLoggedModels_OrderBy) GetDatasetDigest() string {
	if x != nil && x.DatasetDigest != nil {
		return *x.DatasetDigest
	}
	return ""
}

type SearchLoggedModels_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logged Models that match the search criteria.
	Models []*LoggedModel `protobuf:"bytes,1,rep,name=models" json:"models,omitempty" query:"models" params:"models"`
	// Token that can be used to retrieve the next page of Logged Models.
	NextPageToken *string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty" query:"next_page_token" params:"next_page_token"`
}

func (x *SearchLoggedModels_Response) Reset() {
	*x = SearchLoggedModels_Response{}
	mi := &file_service_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchLoggedModels_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLoggedModels_Response) ProtoMessage() {}

func (x *SearchLoggedModels_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLoggedModels_Response.ProtoReflect.Descriptor instead.
func (*SearchLoggedModels_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{70, 2}
}

func (x *SearchLoggedModels_Response) GetModels() []*LoggedModel {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *SearchLoggedModels_Response) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

type SetLoggedModelTags_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated LoggedModel.
	Model *LoggedModel `protobuf:"bytes,1,opt,name=model" json:"model,omitempty" query:"model" params:"model"`
}

func (x *SetLoggedModelTags_Response) Reset() {
	*x = SetLoggedModelTags_Response{}
	mi := &file_service_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetLoggedModelTags_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLoggedModelTags_Response) ProtoMessage() {}

func (x *SetLoggedModelTags_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLoggedModelTags_Response.ProtoReflect.Descriptor instead.
func (*SetLoggedModelTags_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{71, 0}
}

func (x *SetLoggedModelTags_Response) GetModel() *LoggedModel {
	if x != nil {
		return x.Model
	}
	return nil
}

type DeleteLoggedModelTag_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteLoggedModelTag_Response) Reset() {
	*x = DeleteLoggedModelTag_Response{}
	mi := &file_service_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteLoggedModelTag_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLoggedModelTag_Response) ProtoMessage() {}

func (x *DeleteLoggedModelTag_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLoggedModelTag_Response.ProtoReflect.Descriptor instead.
func (*DeleteLoggedModelTag_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{72, 0}
}

type ListLoggedModelArtifacts_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Root artifact directory for the logged model.
	RootUri *string `protobuf:"bytes,1,opt,name=root_uri,json=rootUri" json:"root_uri,omitempty" query:"root_uri" params:"root_uri"`
	// File location and metadata for artifacts.
	Files []*FileInfo `protobuf:"bytes,2,rep,name=files" json:"files,omitempty" query:"files" params:"files"`
	// Token that can be used to retrieve the next page of artifact results
	NextPageToken *string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty" query:"next_page_token" params:"next_page_token"`
}

func (x *ListLoggedModelArtifacts_Response) Reset() {
	*x = ListLoggedModelArtifacts_Response{}
	mi := &file_service_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLoggedModelArtifacts_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLoggedModelArtifacts_Response) ProtoMessage() {}

func (x *ListLoggedModelArtifacts_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLoggedModelArtifacts_Response.ProtoReflect.Descriptor instead.
func (*ListLoggedModelArtifacts_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{73, 0}
}

func (x *ListLoggedModelArtifacts_Response) GetRootUri() string {
	if x != nil && x.RootUri != nil {
		return *x.RootUri
	}
	return ""
}

func (x *ListLoggedModelArtifacts_Response) GetFiles() []*FileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *ListLoggedModelArtifacts_Response) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

type LogLoggedModelParamsRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogLoggedModelParamsRequest_Response) Reset() {
	*x = LogLoggedModelParamsRequest_Response{}
	mi := &file_service_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogLoggedModelParamsRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLoggedModelParamsRequest_Response) ProtoMessage() {}

func (x *LogLoggedModelParamsRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLoggedModelParamsRequest_Response.ProtoReflect.Descriptor instead.
func (*LogLoggedModelParamsRequest_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{74, 0}
}

type SearchTracesV3Request_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information about traces that match the search criteria.
	Traces        []*TraceInfoV3 `protobuf:"bytes,1,rep,name=traces" json:"traces,omitempty" query:"traces" params:"traces"`
	NextPageToken *string        `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty" query:"next_page_token" params:"next_page_token"`
}

func (x *SearchTracesV3Request_Response) Reset() {
	*x = SearchTracesV3Request_Response{}
	mi := &file_service_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchTracesV3Request_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTracesV3Request_Response) ProtoMessage() {}

func (x *SearchTracesV3Request_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTracesV3Request_Response.ProtoReflect.Descriptor instead.
func (*SearchTracesV3Request_Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{81, 0}
}

func (x *SearchTracesV3Request_Response) GetTraces() []*TraceInfoV3 {
	if x != nil {
		return x.Traces
	}
	return nil
}

func (x *SearchTracesV3Request_Response) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x15, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x70, 0x62,
	0x2f, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x15, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x27,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf0, 0x86, 0x19, 0x03, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xf0, 0x86, 0x19, 0x03, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf0, 0x86, 0x19, 0x03, 0x52, 0x07, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf0, 0x86, 0x19, 0x03, 0x52, 0x05, 0x72, 0x75, 0x6e,
	0x49, 0x64, 0x22, 0x2f, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x75, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52,
	0x75, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x12, 0x2c, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x75, 0x6e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x7e,
	0x0a, 0x07, 0x52, 0x75, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x52, 0x75, 0x6e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x7f,
	0x0a, 0x09, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22,
	0x46, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x30, 0x0a, 0x06, 0x52, 0x75, 0x6e, 0x54, 0x61,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x37, 0x0a, 0x0d, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xc5, 0x02, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x55, 0x72,
	0x69, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x22, 0x95, 0x02, 0x0a, 0x0a, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x22, 0x65, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54,
	0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01,
	0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0x2d, 0x0a, 0x0a, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52,
	0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x08, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x54, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x07, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xf8, 0x86, 0x19, 0x01, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0x48, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x22, 0xe2, 0x01,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x1a, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5d, 0x22, 0xcc, 0x02, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x2d, 0x0a, 0x09, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x68, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50,
	0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5d, 0x22, 0xa7, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01,
	0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x3e,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x2b,
	0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x76, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x29, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x0c, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5d, 0x22, 0x77, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a,
	0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72,
	0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68,
	0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x91, 0x01, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x29, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x0c,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43,
	0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d,
	0x22, 0xff, 0x01, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x75, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x75,
	0x6e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x29, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x75, 0x6e,
	0x52, 0x03, 0x72, 0x75, 0x6e, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5d, 0x22, 0x83, 0x02, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e,
	0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x75, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0x36, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x75, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x2b, 0xe2, 0x3f, 0x28,
	0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x61, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6e,
	0x49, 0x64, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x2b,
	0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x62, 0x0a, 0x0a, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52,
	0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b,
	0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22,
	0xdc, 0x02, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x15, 0x0a,
	0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x75, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86,
	0x19, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x15, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x1f,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xf0, 0x86, 0x19, 0x03, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf0, 0x86, 0x19, 0x03, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xf0, 0x86, 0x19, 0x03, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0xa9,
	0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x2b, 0xe2,
	0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0xaa, 0x01, 0x0a, 0x10, 0x53,
	0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x12,
	0x29, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x0c, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0a,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a,
	0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0xa7, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x54,
	0x61, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6e,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50,
	0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5d, 0x22, 0x79, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x1b,
	0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xf8, 0x86, 0x19, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a,
	0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72,
	0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68,
	0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x92, 0x01, 0x0a,
	0x06, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x75, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x1a, 0x29, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x75, 0x6e, 0x52,
	0x03, 0x72, 0x75, 0x6e, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50,
	0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5d, 0x22, 0xf1, 0x02, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x75, 0x6e, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x41, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x04, 0x31, 0x30, 0x30, 0x30, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x1a, 0x53, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x98, 0x02, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x75, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x75, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x74,
	0x55, 0x72, 0x69, 0x12, 0x26, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43,
	0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d,
	0x22, 0x52, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x69, 0x73, 0x44, 0x69, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0xb4, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x1a, 0x5c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x2b,
	0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x85, 0x01, 0x0a, 0x0f,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x57, 0x69, 0x74, 0x68, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x15, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75,
	0x6e, 0x49, 0x64, 0x22, 0xa3, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a,
	0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x65,
	0x70, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x3d, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x57, 0x69, 0x74, 0x68, 0x52, 0x75,
	0x6e, 0x49, 0x64, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x3a, 0x2b, 0xe2, 0x3f,
	0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b,
	0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0xcf, 0x01, 0x0a, 0x08, 0x4c, 0x6f,
	0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x22,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x75, 0x6e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x2b,
	0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x79, 0x0a, 0x08, 0x4c,
	0x6f, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x1a, 0x0a, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0xc5, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x04, 0xf0, 0x86, 0x19, 0x03, 0x52, 0x06, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x8f,
	0x01, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1b, 0x0a,
	0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8,
	0x86, 0x19, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43,
	0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d,
	0x22, 0xb1, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x3e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5d, 0x22, 0xd0, 0x01, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x08,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x55, 0x4d, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x4c, 0x4c, 0x4d, 0x5f, 0x4a, 0x55, 0x44, 0x47, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x22, 0x55, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd1,
	0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x4a, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5d, 0x22, 0x94, 0x02, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x04, 0xf8, 0x86, 0x19,
	0x01, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x04,
	0xf8, 0x86, 0x19, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x1a, 0x4a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0a,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x2b, 0xe2, 0x3f,
	0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b,
	0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x97, 0x01, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x0c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5d, 0x22, 0xba, 0x02, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x22, 0x3e, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x32, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x3c, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0xd3, 0x02, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4d, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x1a, 0x3c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x2b,
	0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x98, 0x01, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x1a, 0x3c, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x89, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x33, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x1a, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x23, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5d, 0x22, 0xb9, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x03, 0x31, 0x30, 0x30, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x1a, 0x5d, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x91,
	0x03, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x07,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x71, 0x6c, 0x5f, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x0e, 0x73, 0x71, 0x6c, 0x57, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x03, 0x31, 0x30, 0x30,
	0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x5d, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5d, 0x22, 0x96, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xf8, 0x86, 0x19, 0x01, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x10, 0x73, 0x71, 0x6c, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x0e, 0x73,
	0x71, 0x6c, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x16, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8,
	0x86, 0x19, 0x01, 0x52, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x1c, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x19, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x1a, 0x29, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8b, 0x02, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x0d,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x1a, 0x31, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x3a, 0x2b, 0xe2, 0x3f,
	0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b,
	0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x53, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x2b, 0xe2, 0x3f,
	0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b,
	0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x7a, 0x0a, 0x0e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x0a, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x3b, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x32,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x33, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xfb, 0x03, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x5d, 0x0a, 0x11, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x57, 0x0a, 0x0f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x3f, 0x0a, 0x18, 0x4d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x40, 0x0a, 0x16, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66,
	0x75, 0x6c, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x11,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4c, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x49, 0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x02, 0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0xd9, 0x06, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x33,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48,
	0x0a, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x33, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x56, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x33, 0x2e, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x40, 0x0a,
	0x12, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x42, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x22, 0x97, 0x01, 0x0a,
	0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x56, 0x33, 0x12, 0x29, 0x0a,
	0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x42, 0x04, 0xf8, 0x86, 0x19,
	0x01, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x1a, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x8d, 0x01, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x0d, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xf8, 0x86, 0x19, 0x01, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73,
	0x1a, 0x4f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x11,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0xdb,
	0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19,
	0x01, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x35, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67,
	0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3a,
	0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72,
	0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68,
	0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0xd3, 0x01, 0x0a,
	0x13, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x07, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x35,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5d, 0x22, 0x95, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x07, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x1a, 0x35, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0x2b, 0xe2,
	0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x6d, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64,
	0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x2b, 0xe2, 0x3f,
	0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b,
	0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x9e, 0x05, 0x0a, 0x12, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x3e, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12,
	0x23, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x35, 0x30, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x1a, 0x59, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x27, 0x0a,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x1a, 0x9c, 0x01,
	0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x23, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8,
	0x86, 0x19, 0x01, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x1a, 0x5f, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x06, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x2b, 0xe2,
	0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0xc5, 0x01, 0x0a, 0x12, 0x53,
	0x65, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x35,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5d, 0x22, 0x8f, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x67,
	0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8,
	0x86, 0x19, 0x01, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x07,
	0x74, 0x61, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8,
	0x86, 0x19, 0x01, 0x52, 0x06, 0x74, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x1a, 0x0a, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5d, 0x22, 0xb6, 0x02, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67,
	0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x75, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x55, 0x72, 0x69,
	0x12, 0x26, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0xad, 0x01,
	0x0a, 0x1b, 0x4c, 0x6f, 0x67, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x67, 0x0a,
	0x0b, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xaa, 0x04, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x67, 0x65,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4d, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x55, 0x72, 0x69,
	0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x38, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4b, 0x0a,
	0x1b, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x0f, 0x4c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x3e, 0x0a,
	0x14, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd2, 0x02,
	0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x56, 0x33,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x03, 0x31, 0x30, 0x30, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x5f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x56, 0x33, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5d, 0x2a, 0x36, 0x0a, 0x08, 0x56, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x2a, 0x49, 0x0a, 0x0a, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x45,
	0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x4f, 0x42, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0xe8, 0x07, 0x2a, 0x4d, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x49, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x05, 0x2a, 0x4f, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0x8a, 0x01, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x1f, 0x4c,
	0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c,
	0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f,
	0x47, 0x47, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x4c, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x32, 0xd8, 0x39, 0x0a, 0x0d, 0x4d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x24, 0x2e, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4c, 0xf2, 0x86, 0x19, 0x48, 0x0a, 0x2c, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x1f, 0x2f, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x62, 0x79, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x04, 0x08,
	0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x16, 0x47, 0x65, 0x74, 0x20, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x42, 0x79, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x94, 0x01,
	0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x21, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x43, 0xf2, 0x86, 0x19, 0x3f, 0x0a, 0x28, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x1a, 0x2f,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10,
	0x01, 0x2a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0xc1, 0x01, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x22, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0xf2, 0x86, 0x19, 0x69, 0x0a,
	0x28, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x1a, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x0a, 0x27, 0x0a, 0x03, 0x47, 0x45, 0x54,
	0x12, 0x1a, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0x04, 0x08, 0x02,
	0x10, 0x00, 0x10, 0x01, 0x2a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x0d, 0x67, 0x65, 0x74,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x40, 0xf2, 0x86, 0x19, 0x38, 0x0a, 0x24, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x17,
	0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a,
	0x0e, 0x47, 0x65, 0x74, 0x20, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0xba,
	0x8c, 0x19, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0xf2, 0x86, 0x19, 0x3f, 0x0a, 0x28, 0x0a, 0x04, 0x50,
	0x4f, 0x53, 0x54, 0x12, 0x1a, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a,
	0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x99, 0x01, 0x0a, 0x11, 0x72,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x19, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x45, 0xf2, 0x86, 0x19, 0x41, 0x0a, 0x29, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x1b, 0x2f,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00,
	0x10, 0x01, 0x2a, 0x12, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x94, 0x01, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0xf2, 0x86, 0x19, 0x3f, 0x0a, 0x28,
	0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x1a, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x20, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x71, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x11, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x1a, 0x1a, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0xf2, 0x86, 0x19, 0x31, 0x0a,
	0x21, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x13, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x72, 0x75, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x04, 0x08, 0x02,
	0x10, 0x00, 0x10, 0x01, 0x2a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x52, 0x75, 0x6e,
	0x12, 0x71, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x11, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e,
	0x1a, 0x1a, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x75, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0xf2, 0x86,
	0x19, 0x31, 0x0a, 0x21, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x13, 0x2f, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x75, 0x6e, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a,
	0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20,
	0x52, 0x75, 0x6e, 0x12, 0x71, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6e,
	0x12, 0x11, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x75, 0x6e, 0x1a, 0x1a, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x35, 0xf2, 0x86, 0x19, 0x31, 0x0a, 0x21, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x13, 0x2f,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x75, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x20, 0x52, 0x75, 0x6e, 0x12, 0x76, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x75, 0x6e, 0x12, 0x12, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x75, 0x6e, 0x1a, 0x1b, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x75, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0xf2, 0x86, 0x19, 0x33, 0x0a, 0x22, 0x0a, 0x04, 0x50,
	0x4f, 0x53, 0x54, 0x12, 0x14, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x75, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10,
	0x01, 0x2a, 0x0b, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x52, 0x75, 0x6e, 0x12, 0x75,
	0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x11, 0x2e, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x1a, 0x1a,
	0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0xf2, 0x86, 0x19, 0x35,
	0x0a, 0x25, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x17, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x72, 0x75, 0x6e, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x0a, 0x4c, 0x6f, 0x67, 0x20, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x74, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x10, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x1a, 0x19, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b,
	0xf2, 0x86, 0x19, 0x37, 0x0a, 0x28, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x1a, 0x2f, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x75, 0x6e, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x2d, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01,
	0x2a, 0x09, 0x4c, 0x6f, 0x67, 0x20, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0xa1, 0x01, 0x0a, 0x10,
	0x73, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67,
	0x12, 0x18, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x1a, 0x21, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0xf2,
	0x86, 0x19, 0x4c, 0x0a, 0x34, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x26, 0x2f, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x73, 0x65, 0x74, 0x2d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2d,
	0x74, 0x61, 0x67, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x12, 0x53, 0x65, 0x74,
	0x20, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x54, 0x61, 0x67, 0x12,
	0x66, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x54, 0x61, 0x67, 0x12, 0x0e, 0x2e, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x1a, 0x17, 0x2e, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x33, 0xf2, 0x86, 0x19, 0x2f, 0x0a, 0x22, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54,
	0x12, 0x14, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x75, 0x6e, 0x73, 0x2f, 0x73,
	0x65, 0x74, 0x2d, 0x74, 0x61, 0x67, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x07,
	0x53, 0x65, 0x74, 0x20, 0x54, 0x61, 0x67, 0x12, 0x88, 0x01, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x12, 0x13, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x1a, 0x1c, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x61,
	0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0xf2, 0x86, 0x19, 0x42,
	0x0a, 0x2f, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x12, 0x20, 0x2f, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x04, 0x08, 0x02, 0x10,
	0x00, 0x10, 0x03, 0x2a, 0x0d, 0x53, 0x65, 0x74, 0x20, 0x54, 0x72, 0x61, 0x63, 0x65, 0x20, 0x54,
	0x61, 0x67, 0x12, 0x95, 0x01, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x54, 0x61, 0x67, 0x12, 0x16, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x1a, 0x1f, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x54, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a,
	0xf2, 0x86, 0x19, 0x46, 0x0a, 0x30, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x20,
	0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x67, 0x73,
	0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x03, 0x2a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x20, 0x54, 0x72, 0x61, 0x63, 0x65, 0x20, 0x54, 0x61, 0x67, 0x12, 0x75, 0x0a, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x11, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x1a, 0x1a, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0xf2, 0x86, 0x19, 0x35, 0x0a, 0x25, 0x0a, 0x04,
	0x50, 0x4f, 0x53, 0x54, 0x12, 0x17, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x75,
	0x6e, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x1a, 0x04, 0x08,
	0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x54, 0x61,
	0x67, 0x12, 0x65, 0x0a, 0x06, 0x67, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x0e, 0x2e, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x1a, 0x17, 0x2e, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0xf2, 0x86, 0x19, 0x2a, 0x0a, 0x1d, 0x0a, 0x03, 0x47, 0x45,
	0x54, 0x12, 0x10, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x75, 0x6e, 0x73, 0x2f,
	0x67, 0x65, 0x74, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x07, 0x47, 0x65, 0x74,
	0x20, 0x52, 0x75, 0x6e, 0xba, 0x8c, 0x19, 0x00, 0x12, 0x79, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x12, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x75, 0x6e, 0x73, 0x1a, 0x1b, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x75, 0x6e, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0xf2, 0x86, 0x19, 0x32, 0x0a, 0x21, 0x0a,
	0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x13, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72,
	0x75, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00,
	0x10, 0x01, 0x2a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x52, 0x75, 0x6e, 0x73, 0xba,
	0x8c, 0x19, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x15, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x1e, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0xf2, 0x86,
	0x19, 0x37, 0x0a, 0x23, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x16, 0x2f, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x20,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0xba, 0x8c, 0x19, 0x00, 0x12, 0x95, 0x01,
	0x0a, 0x10, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x18, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x21, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x44, 0xf2, 0x86, 0x19, 0x40, 0x0a, 0x28, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x1b, 0x2f, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x67, 0x65,
	0x74, 0x2d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10,
	0x01, 0x2a, 0x12, 0x47, 0x65, 0x74, 0x20, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0xb7, 0x01, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x24, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x2d, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0xf2, 0x86, 0x19,
	0x3a, 0x0a, 0x36, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x29, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x62, 0x75, 0x6c, 0x6b, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x0b, 0x10, 0x03, 0xba, 0x8c, 0x19, 0x00, 0x12,
	0x70, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x10, 0x2e, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x19, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0xf2, 0x86, 0x19, 0x33, 0x0a, 0x24,
	0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x16, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x72, 0x75, 0x6e, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x2d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x04,
	0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x09, 0x4c, 0x6f, 0x67, 0x20, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x70, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x10, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x1a,
	0x19, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0xf2, 0x86, 0x19, 0x33,
	0x0a, 0x24, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x16, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x72, 0x75, 0x6e, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x09, 0x4c, 0x6f, 0x67, 0x20, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x75, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x12, 0x11, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x1a, 0x1a, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x39, 0xf2, 0x86, 0x19, 0x35, 0x0a, 0x25, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x17, 0x2f,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x75, 0x6e, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x2d,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x0a,
	0x4c, 0x6f, 0x67, 0x20, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x76, 0x0a, 0x0a, 0x6c, 0x6f,
	0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x12, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x1b, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0xf2, 0x86, 0x19, 0x33, 0x0a,
	0x22, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x14, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x72, 0x75, 0x6e, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x04, 0x08,
	0x02, 0x10, 0x00, 0x10, 0x03, 0x2a, 0x0b, 0x4c, 0x6f, 0x67, 0x20, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x1f, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c,
	0xf2, 0x86, 0x19, 0x34, 0x0a, 0x30, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x22, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x03, 0xba, 0x8c, 0x19, 0x00, 0x12, 0x70, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x12, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x1a, 0x1b,
	0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0xf2, 0x86, 0x19,
	0x2d, 0x0a, 0x1c, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x0e, 0x2f, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10,
	0x03, 0x2a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x76,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x10, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x1a, 0x19, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0xf2, 0x86, 0x19, 0x39, 0x0a, 0x2a, 0x0a,
	0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x12, 0x1b, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x03, 0x2a, 0x09, 0x45, 0x6e, 0x64,
	0x20, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1d, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0xf2, 0x86,
	0x19, 0x40, 0x0a, 0x2d, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x20, 0x2f, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x04, 0x08, 0x02, 0x10,
	0x00, 0x10, 0x03, 0x2a, 0x0d, 0x47, 0x65, 0x74, 0x20, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x8b, 0x01, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x56, 0x33, 0x12, 0x16, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x33, 0x1a, 0x1f, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x56, 0x33, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40,
	0xf2, 0x86, 0x19, 0x3c, 0x0a, 0x26, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x19, 0x2f, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x03, 0x2a, 0x10,
	0x47, 0x65, 0x74, 0x20, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x76, 0x33,
	0x12, 0x77, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x14, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x1d, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0xf2, 0x86, 0x19, 0x2e, 0x0a, 0x1b, 0x0a, 0x03, 0x47,
	0x45, 0x54, 0x12, 0x0e, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x03, 0x2a, 0x0d, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x20, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x0c, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x56, 0x33, 0x12, 0x14, 0x2e, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x56, 0x33, 0x1a,
	0x1d, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x56, 0x33, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24,
	0xf2, 0x86, 0x19, 0x20, 0x0a, 0x1c, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x0e, 0x2f, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x04, 0x08, 0x03,
	0x10, 0x00, 0x10, 0x03, 0x12, 0xa2, 0x01, 0x0a, 0x19, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x12, 0x1b, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x1a,
	0x24, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0xf2, 0x86, 0x19, 0x3e, 0x0a, 0x23, 0x0a, 0x03, 0x47,
	0x45, 0x54, 0x12, 0x16, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00,
	0x10, 0x03, 0x2a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x55, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x20, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x15, 0x67, 0x65,
	0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x1d, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x1a, 0x26, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0xf2, 0x86, 0x19, 0x4b,
	0x0a, 0x2d, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x20, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x67, 0x65, 0x74, 0x2d, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10,
	0x03, 0x2a, 0x18, 0x47, 0x65, 0x74, 0x20, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x20, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x0c,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x1a, 0x1d, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x41, 0xf2, 0x86, 0x19, 0x3d, 0x0a, 0x2a, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12,
	0x1c, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x04, 0x08,
	0x02, 0x10, 0x00, 0x10, 0x03, 0x2a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x19, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x22, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0xf2, 0x86, 0x19, 0x3c, 0x0a,
	0x23, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x15, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x1a, 0x04,
	0x08, 0x02, 0x10, 0x00, 0x10, 0x03, 0x2a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x4c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0xa8, 0x01, 0x0a, 0x13,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x1b, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x1a, 0x24, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0xf2, 0x86, 0x19, 0x4a, 0x0a, 0x2f, 0x0a, 0x05,
	0x50, 0x41, 0x54, 0x43, 0x48, 0x12, 0x20, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x03, 0x2a,
	0x15, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x20, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x92, 0x01, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16, 0x2e, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x1a, 0x1f, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x47, 0xf2, 0x86, 0x19, 0x43, 0x0a, 0x2d, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12,
	0x20, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x7d, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x03, 0x2a, 0x10, 0x47, 0x65, 0x74, 0x20, 0x4c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0xa3, 0x01, 0x0a, 0x11,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x19, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x22, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x67,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4f, 0xf2, 0x86, 0x19, 0x4b, 0x0a, 0x30, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x12, 0x20, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x7d, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x03, 0x2a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x20, 0x61, 0x20, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x20, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x9e, 0x01, 0x0a, 0x12, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x67,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x1a, 0x23, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0xf2, 0x86, 0x19, 0x43, 0x0a,
	0x2a, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x1c, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x03, 0x2a, 0x13, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x2e, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x54, 0x61, 0x67, 0x73, 0x1a, 0x23, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53,
	0x65, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x61, 0x67,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0xf2, 0x86, 0x19, 0x4e,
	0x0a, 0x34, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x12, 0x25, 0x2f, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x67, 0x73,
	0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x03, 0x2a, 0x14, 0x53, 0x65, 0x74, 0x20, 0x4c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x20, 0x54, 0x61, 0x67, 0x12, 0xbd,
	0x01, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x12, 0x1c, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x54, 0x61, 0x67, 0x1a, 0x25, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0xf2, 0x86,
	0x19, 0x5c, 0x0a, 0x3f, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x2f, 0x2f, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74,
	0x61, 0x67, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x7d, 0x1a, 0x04, 0x08,
	0x02, 0x10, 0x00, 0x10, 0x03, 0x2a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x4c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x20, 0x54, 0x61, 0x67, 0x12, 0xd6,
	0x01, 0x0a, 0x18, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x29, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x65,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0xf2, 0x86, 0x19, 0x69, 0x0a, 0x43,
	0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x36, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x04, 0x08,
	0x02, 0x10, 0x00, 0x10, 0x03, 0x2a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x4c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x23, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x6f, 0x67,
	0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c,
	0x6f, 0x67, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x56, 0xf2, 0x86, 0x19, 0x52, 0x0a, 0x35, 0x0a, 0x04, 0x50, 0x4f, 0x53,
	0x54, 0x12, 0x27, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x65,
	0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00,
	0x10, 0x03, 0x2a, 0x17, 0x4c, 0x6f, 0x67, 0x20, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x20, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x20, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0xdf, 0x01, 0x0a, 0x10,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d, 0x01,
	0xf2, 0x86, 0x19, 0x88, 0x01, 0x0a, 0x3e, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x30, 0x2f,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a,
	0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x03, 0x18, 0xe8, 0x07, 0x18, 0xee, 0x07, 0x18, 0x0c, 0x18,
	0x01, 0x2a, 0x3a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0xd0, 0x01,
	0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x21, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x7f, 0xf2, 0x86, 0x19, 0x7b, 0x0a, 0x44, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x12, 0x35,
	0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x03, 0x18, 0xe8, 0x07,
	0x18, 0xee, 0x07, 0x18, 0x01, 0x2a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e,
	0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x12, 0xb1, 0x01, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x1a,
	0x21, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x60, 0xf2, 0x86, 0x19, 0x5c, 0x0a, 0x45, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x12, 0x35, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10,
	0x03, 0x2a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x73, 0x56, 0x33, 0x12, 0x1d, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x56, 0x33, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x56, 0x33, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d,
	0xf2, 0x86, 0x19, 0x39, 0x0a, 0x23, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x15, 0x2f, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x1a, 0x04, 0x08, 0x03, 0x10, 0x00, 0x10, 0x03, 0x2a, 0x10, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x20, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x20, 0x56, 0x33, 0x42, 0x1e, 0xe2,
	0x3f, 0x02, 0x10, 0x01, 0x0a, 0x14, 0x6f, 0x72, 0x67, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x90, 0x01, 0x01,
}

var (
	file_service_proto_rawDescOnce sync.Once
	file_service_proto_rawDescData = file_service_proto_rawDesc
)

func file_service_proto_rawDescGZIP() []byte {
	file_service_proto_rawDescOnce.Do(func() {
		file_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_proto_rawDescData)
	})
	return file_service_proto_rawDescData
}

var file_service_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_service_proto_msgTypes = make([]protoimpl.MessageInfo, 138)
var file_service_proto_goTypes = []any{
	(ViewType)(0),                                  // 0: mlflow.ViewType
	(SourceType)(0),                                // 1: mlflow.SourceType
	(RunStatus)(0),                                 // 2: mlflow.RunStatus
	(TraceStatus)(0),                               // 3: mlflow.TraceStatus
	(LoggedModelStatus)(0),                         // 4: mlflow.LoggedModelStatus
	(AssessmentSource_SourceType)(0),               // 5: mlflow.AssessmentSource.SourceType
	(TraceLocation_TraceLocationType)(0),           // 6: mlflow.TraceLocation.TraceLocationType
	(TraceInfoV3_State)(0),                         // 7: mlflow.TraceInfoV3.State
	(*Metric)(nil),                                 // 8: mlflow.Metric
	(*Param)(nil),                                  // 9: mlflow.Param
	(*Run)(nil),                                    // 10: mlflow.Run
	(*RunData)(nil),                                // 11: mlflow.RunData
	(*RunInputs)(nil),                              // 12: mlflow.RunInputs
	(*RunOutputs)(nil),                             // 13: mlflow.RunOutputs
	(*RunTag)(nil),                                 // 14: mlflow.RunTag
	(*ExperimentTag)(nil),                          // 15: mlflow.ExperimentTag
	(*RunInfo)(nil),                                // 16: mlflow.RunInfo
	(*Experiment)(nil),                             // 17: mlflow.Experiment
	(*DatasetInput)(nil),                           // 18: mlflow.DatasetInput
	(*ModelInput)(nil),                             // 19: mlflow.ModelInput
	(*InputTag)(nil),                               // 20: mlflow.InputTag
	(*Dataset)(nil),                                // 21: mlflow.Dataset
	(*ModelOutput)(nil),                            // 22: mlflow.ModelOutput
	(*CreateExperiment)(nil),                       // 23: mlflow.CreateExperiment
	(*SearchExperiments)(nil),                      // 24: mlflow.SearchExperiments
	(*GetExperiment)(nil),                          // 25: mlflow.GetExperiment
	(*DeleteExperiment)(nil),                       // 26: mlflow.DeleteExperiment
	(*RestoreExperiment)(nil),                      // 27: mlflow.RestoreExperiment
	(*UpdateExperiment)(nil),                       // 28: mlflow.UpdateExperiment
	(*CreateRun)(nil),                              // 29: mlflow.CreateRun
	(*UpdateRun)(nil),                              // 30: mlflow.UpdateRun
	(*DeleteRun)(nil),                              // 31: mlflow.DeleteRun
	(*RestoreRun)(nil),                             // 32: mlflow.RestoreRun
	(*LogMetric)(nil),                              // 33: mlflow.LogMetric
	(*LogParam)(nil),                               // 34: mlflow.LogParam
	(*SetExperimentTag)(nil),                       // 35: mlflow.SetExperimentTag
	(*SetTag)(nil),                                 // 36: mlflow.SetTag
	(*DeleteTag)(nil),                              // 37: mlflow.DeleteTag
	(*GetRun)(nil),                                 // 38: mlflow.GetRun
	(*SearchRuns)(nil),                             // 39: mlflow.SearchRuns
	(*ListArtifacts)(nil),                          // 40: mlflow.ListArtifacts
	(*FileInfo)(nil),                               // 41: mlflow.FileInfo
	(*GetMetricHistory)(nil),                       // 42: mlflow.GetMetricHistory
	(*MetricWithRunId)(nil),                        // 43: mlflow.MetricWithRunId
	(*GetMetricHistoryBulkInterval)(nil),           // 44: mlflow.GetMetricHistoryBulkInterval
	(*LogBatch)(nil),                               // 45: mlflow.LogBatch
	(*LogModel)(nil),                               // 46: mlflow.LogModel
	(*LogInputs)(nil),                              // 47: mlflow.LogInputs
	(*LogOutputs)(nil),                             // 48: mlflow.LogOutputs
	(*GetExperimentByName)(nil),                    // 49: mlflow.GetExperimentByName
	(*AssessmentSource)(nil),                       // 50: mlflow.AssessmentSource
	(*AssessmentError)(nil),                        // 51: mlflow.AssessmentError
	(*CreateAssessment)(nil),                       // 52: mlflow.CreateAssessment
	(*UpdateAssessment)(nil),                       // 53: mlflow.UpdateAssessment
	(*DeleteAssessment)(nil),                       // 54: mlflow.DeleteAssessment
	(*TraceInfo)(nil),                              // 55: mlflow.TraceInfo
	(*TraceRequestMetadata)(nil),                   // 56: mlflow.TraceRequestMetadata
	(*TraceTag)(nil),                               // 57: mlflow.TraceTag
	(*StartTrace)(nil),                             // 58: mlflow.StartTrace
	(*EndTrace)(nil),                               // 59: mlflow.EndTrace
	(*GetTraceInfo)(nil),                           // 60: mlflow.GetTraceInfo
	(*GetTraceInfoV3)(nil),                         // 61: mlflow.GetTraceInfoV3
	(*SearchTraces)(nil),                           // 62: mlflow.SearchTraces
	(*SearchUnifiedTraces)(nil),                    // 63: mlflow.SearchUnifiedTraces
	(*GetOnlineTraceDetails)(nil),                  // 64: mlflow.GetOnlineTraceDetails
	(*DeleteTraces)(nil),                           // 65: mlflow.DeleteTraces
	(*SetTraceTag)(nil),                            // 66: mlflow.SetTraceTag
	(*DeleteTraceTag)(nil),                         // 67: mlflow.DeleteTraceTag
	(*Trace)(nil),                                  // 68: mlflow.Trace
	(*TraceLocation)(nil),                          // 69: mlflow.TraceLocation
	(*TraceInfoV3)(nil),                            // 70: mlflow.TraceInfoV3
	(*StartTraceV3)(nil),                           // 71: mlflow.StartTraceV3
	(*DatasetSummary)(nil),                         // 72: mlflow.DatasetSummary
	(*SearchDatasets)(nil),                         // 73: mlflow.SearchDatasets
	(*CreateLoggedModel)(nil),                      // 74: mlflow.CreateLoggedModel
	(*FinalizeLoggedModel)(nil),                    // 75: mlflow.FinalizeLoggedModel
	(*GetLoggedModel)(nil),                         // 76: mlflow.GetLoggedModel
	(*DeleteLoggedModel)(nil),                      // 77: mlflow.DeleteLoggedModel
	(*SearchLoggedModels)(nil),                     // 78: mlflow.SearchLoggedModels
	(*SetLoggedModelTags)(nil),                     // 79: mlflow.SetLoggedModelTags
	(*DeleteLoggedModelTag)(nil),                   // 80: mlflow.DeleteLoggedModelTag
	(*ListLoggedModelArtifacts)(nil),               // 81: mlflow.ListLoggedModelArtifacts
	(*LogLoggedModelParamsRequest)(nil),            // 82: mlflow.LogLoggedModelParamsRequest
	(*LoggedModel)(nil),                            // 83: mlflow.LoggedModel
	(*LoggedModelInfo)(nil),                        // 84: mlflow.LoggedModelInfo
	(*LoggedModelTag)(nil),                         // 85: mlflow.LoggedModelTag
	(*LoggedModelRegistrationInfo)(nil),            // 86: mlflow.LoggedModelRegistrationInfo
	(*LoggedModelData)(nil),                        // 87: mlflow.LoggedModelData
	(*LoggedModelParameter)(nil),                   // 88: mlflow.LoggedModelParameter
	(*SearchTracesV3Request)(nil),                  // 89: mlflow.SearchTracesV3Request
	(*CreateExperiment_Response)(nil),              // 90: mlflow.CreateExperiment.Response
	(*SearchExperiments_Response)(nil),             // 91: mlflow.SearchExperiments.Response
	(*GetExperiment_Response)(nil),                 // 92: mlflow.GetExperiment.Response
	(*DeleteExperiment_Response)(nil),              // 93: mlflow.DeleteExperiment.Response
	(*RestoreExperiment_Response)(nil),             // 94: mlflow.RestoreExperiment.Response
	(*UpdateExperiment_Response)(nil),              // 95: mlflow.UpdateExperiment.Response
	(*CreateRun_Response)(nil),                     // 96: mlflow.CreateRun.Response
	(*UpdateRun_Response)(nil),                     // 97: mlflow.UpdateRun.Response
	(*DeleteRun_Response)(nil),                     // 98: mlflow.DeleteRun.Response
	(*RestoreRun_Response)(nil),                    // 99: mlflow.RestoreRun.Response
	(*LogMetric_Response)(nil),                     // 100: mlflow.LogMetric.Response
	(*LogParam_Response)(nil),                      // 101: mlflow.LogParam.Response
	(*SetExperimentTag_Response)(nil),              // 102: mlflow.SetExperimentTag.Response
	(*SetTag_Response)(nil),                        // 103: mlflow.SetTag.Response
	(*DeleteTag_Response)(nil),                     // 104: mlflow.DeleteTag.Response
	(*GetRun_Response)(nil),                        // 105: mlflow.GetRun.Response
	(*SearchRuns_Response)(nil),                    // 106: mlflow.SearchRuns.Response
	(*ListArtifacts_Response)(nil),                 // 107: mlflow.ListArtifacts.Response
	(*GetMetricHistory_Response)(nil),              // 108: mlflow.GetMetricHistory.Response
	(*GetMetricHistoryBulkInterval_Response)(nil),  // 109: mlflow.GetMetricHistoryBulkInterval.Response
	(*LogBatch_Response)(nil),                      // 110: mlflow.LogBatch.Response
	(*LogModel_Response)(nil),                      // 111: mlflow.LogModel.Response
	(*LogInputs_Response)(nil),                     // 112: mlflow.LogInputs.Response
	(*LogOutputs_Response)(nil),                    // 113: mlflow.LogOutputs.Response
	(*GetExperimentByName_Response)(nil),           // 114: mlflow.GetExperimentByName.Response
	(*CreateAssessment_Response)(nil),              // 115: mlflow.CreateAssessment.Response
	(*UpdateAssessment_Response)(nil),              // 116: mlflow.UpdateAssessment.Response
	(*DeleteAssessment_Response)(nil),              // 117: mlflow.DeleteAssessment.Response
	(*StartTrace_Response)(nil),                    // 118: mlflow.StartTrace.Response
	(*EndTrace_Response)(nil),                      // 119: mlflow.EndTrace.Response
	(*GetTraceInfo_Response)(nil),                  // 120: mlflow.GetTraceInfo.Response
	(*GetTraceInfoV3_Response)(nil),                // 121: mlflow.GetTraceInfoV3.Response
	(*SearchTraces_Response)(nil),                  // 122: mlflow.SearchTraces.Response
	(*SearchUnifiedTraces_Response)(nil),           // 123: mlflow.SearchUnifiedTraces.Response
	(*GetOnlineTraceDetails_Response)(nil),         // 124: mlflow.GetOnlineTraceDetails.Response
	(*DeleteTraces_Response)(nil),                  // 125: mlflow.DeleteTraces.Response
	(*SetTraceTag_Response)(nil),                   // 126: mlflow.SetTraceTag.Response
	(*DeleteTraceTag_Response)(nil),                // 127: mlflow.DeleteTraceTag.Response
	(*TraceLocation_MlflowExperimentLocation)(nil), // 128: mlflow.TraceLocation.MlflowExperimentLocation
	(*TraceLocation_InferenceTableLocation)(nil),   // 129: mlflow.TraceLocation.InferenceTableLocation
	nil,                                          // 130: mlflow.TraceInfoV3.TraceMetadataEntry
	nil,                                          // 131: mlflow.TraceInfoV3.TagsEntry
	(*StartTraceV3_Response)(nil),                // 132: mlflow.StartTraceV3.Response
	(*SearchDatasets_Response)(nil),              // 133: mlflow.SearchDatasets.Response
	(*CreateLoggedModel_Response)(nil),           // 134: mlflow.CreateLoggedModel.Response
	(*FinalizeLoggedModel_Response)(nil),         // 135: mlflow.FinalizeLoggedModel.Response
	(*GetLoggedModel_Response)(nil),              // 136: mlflow.GetLoggedModel.Response
	(*DeleteLoggedModel_Response)(nil),           // 137: mlflow.DeleteLoggedModel.Response
	(*SearchLoggedModels_Dataset)(nil),           // 138: mlflow.SearchLoggedModels.Dataset
	(*SearchLoggedModels_OrderBy)(nil),           // 139: mlflow.SearchLoggedModels.OrderBy
	(*SearchLoggedModels_Response)(nil),          // 140: mlflow.SearchLoggedModels.Response
	(*SetLoggedModelTags_Response)(nil),          // 141: mlflow.SetLoggedModelTags.Response
	(*DeleteLoggedModelTag_Response)(nil),        // 142: mlflow.DeleteLoggedModelTag.Response
	(*ListLoggedModelArtifacts_Response)(nil),    // 143: mlflow.ListLoggedModelArtifacts.Response
	(*LogLoggedModelParamsRequest_Response)(nil), // 144: mlflow.LogLoggedModelParamsRequest.Response
	(*SearchTracesV3Request_Response)(nil),       // 145: mlflow.SearchTracesV3Request.Response
	(*Assessment)(nil),                           // 146: mlflow.assessments.Assessment
	(*fieldmaskpb.FieldMask)(nil),                // 147: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),                // 148: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                  // 149: google.protobuf.Duration
}
var file_service_proto_depIdxs = []int32{
	16,  // 0: mlflow.Run.info:type_name -> mlflow.RunInfo
	11,  // 1: mlflow.Run.data:type_name -> mlflow.RunData
	12,  // 2: mlflow.Run.inputs:type_name -> mlflow.RunInputs
	13,  // 3: mlflow.Run.outputs:type_name -> mlflow.RunOutputs
	8,   // 4: mlflow.RunData.metrics:type_name -> mlflow.Metric
	9,   // 5: mlflow.RunData.params:type_name -> mlflow.Param
	14,  // 6: mlflow.RunData.tags:type_name -> mlflow.RunTag
	18,  // 7: mlflow.RunInputs.dataset_inputs:type_name -> mlflow.DatasetInput
	19,  // 8: mlflow.RunInputs.model_inputs:type_name -> mlflow.ModelInput
	22,  // 9: mlflow.RunOutputs.model_outputs:type_name -> mlflow.ModelOutput
	2,   // 10: mlflow.RunInfo.status:type_name -> mlflow.RunStatus
	15,  // 11: mlflow.Experiment.tags:type_name -> mlflow.ExperimentTag
	20,  // 12: mlflow.DatasetInput.tags:type_name -> mlflow.InputTag
	21,  // 13: mlflow.DatasetInput.dataset:type_name -> mlflow.Dataset
	15,  // 14: mlflow.CreateExperiment.tags:type_name -> mlflow.ExperimentTag
	0,   // 15: mlflow.SearchExperiments.view_type:type_name -> mlflow.ViewType
	14,  // 16: mlflow.CreateRun.tags:type_name -> mlflow.RunTag
	2,   // 17: mlflow.UpdateRun.status:type_name -> mlflow.RunStatus
	0,   // 18: mlflow.SearchRuns.run_view_type:type_name -> mlflow.ViewType
	8,   // 19: mlflow.LogBatch.metrics:type_name -> mlflow.Metric
	9,   // 20: mlflow.LogBatch.params:type_name -> mlflow.Param
	14,  // 21: mlflow.LogBatch.tags:type_name -> mlflow.RunTag
	18,  // 22: mlflow.LogInputs.datasets:type_name -> mlflow.DatasetInput
	19,  // 23: mlflow.LogInputs.models:type_name -> mlflow.ModelInput
	22,  // 24: mlflow.LogOutputs.models:type_name -> mlflow.ModelOutput
	5,   // 25: mlflow.AssessmentSource.source_type:type_name -> mlflow.AssessmentSource.SourceType
	146, // 26: mlflow.CreateAssessment.assessment:type_name -> mlflow.assessments.Assessment
	146, // 27: mlflow.UpdateAssessment.assessment:type_name -> mlflow.assessments.Assessment
	147, // 28: mlflow.UpdateAssessment.update_mask:type_name -> google.protobuf.FieldMask
	3,   // 29: mlflow.TraceInfo.status:type_name -> mlflow.TraceStatus
	56,  // 30: mlflow.TraceInfo.request_metadata:type_name -> mlflow.TraceRequestMetadata
	57,  // 31: mlflow.TraceInfo.tags:type_name -> mlflow.TraceTag
	56,  // 32: mlflow.StartTrace.request_metadata:type_name -> mlflow.TraceRequestMetadata
	57,  // 33: mlflow.StartTrace.tags:type_name -> mlflow.TraceTag
	3,   // 34: mlflow.EndTrace.status:type_name -> mlflow.TraceStatus
	56,  // 35: mlflow.EndTrace.request_metadata:type_name -> mlflow.TraceRequestMetadata
	57,  // 36: mlflow.EndTrace.tags:type_name -> mlflow.TraceTag
	70,  // 37: mlflow.Trace.trace_info:type_name -> mlflow.TraceInfoV3
	6,   // 38: mlflow.TraceLocation.type:type_name -> mlflow.TraceLocation.TraceLocationType
	128, // 39: mlflow.TraceLocation.mlflow_experiment:type_name -> mlflow.TraceLocation.MlflowExperimentLocation
	129, // 40: mlflow.TraceLocation.inference_table:type_name -> mlflow.TraceLocation.InferenceTableLocation
	69,  // 41: mlflow.TraceInfoV3.trace_location:type_name -> mlflow.TraceLocation
	148, // 42: mlflow.TraceInfoV3.request_time:type_name -> google.protobuf.Timestamp
	149, // 43: mlflow.TraceInfoV3.execution_duration:type_name -> google.protobuf.Duration
	7,   // 44: mlflow.TraceInfoV3.state:type_name -> mlflow.TraceInfoV3.State
	130, // 45: mlflow.TraceInfoV3.trace_metadata:type_name -> mlflow.TraceInfoV3.TraceMetadataEntry
	146, // 46: mlflow.TraceInfoV3.assessments:type_name -> mlflow.assessments.Assessment
	131, // 47: mlflow.TraceInfoV3.tags:type_name -> mlflow.TraceInfoV3.TagsEntry
	68,  // 48: mlflow.StartTraceV3.trace:type_name -> mlflow.Trace
	88,  // 49: mlflow.CreateLoggedModel.params:type_name -> mlflow.LoggedModelParameter
	85,  // 50: mlflow.CreateLoggedModel.tags:type_name -> mlflow.LoggedModelTag
	4,   // 51: mlflow.FinalizeLoggedModel.status:type_name -> mlflow.LoggedModelStatus
	138, // 52: mlflow.SearchLoggedModels.datasets:type_name -> mlflow.SearchLoggedModels.Dataset
	139, // 53: mlflow.SearchLoggedModels.order_by:type_name -> mlflow.SearchLoggedModels.OrderBy
	85,  // 54: mlflow.SetLoggedModelTags.tags:type_name -> mlflow.LoggedModelTag
	88,  // 55: mlflow.LogLoggedModelParamsRequest.params:type_name -> mlflow.LoggedModelParameter
	84,  // 56: mlflow.LoggedModel.info:type_name -> mlflow.LoggedModelInfo
	87,  // 57: mlflow.LoggedModel.data:type_name -> mlflow.LoggedModelData
	4,   // 58: mlflow.LoggedModelInfo.status:type_name -> mlflow.LoggedModelStatus
	85,  // 59: mlflow.LoggedModelInfo.tags:type_name -> mlflow.LoggedModelTag
	86,  // 60: mlflow.LoggedModelInfo.registrations:type_name -> mlflow.LoggedModelRegistrationInfo
	88,  // 61: mlflow.LoggedModelData.params:type_name -> mlflow.LoggedModelParameter
	8,   // 62: mlflow.LoggedModelData.metrics:type_name -> mlflow.Metric
	69,  // 63: mlflow.SearchTracesV3Request.locations:type_name -> mlflow.TraceLocation
	17,  // 64: mlflow.SearchExperiments.Response.experiments:type_name -> mlflow.Experiment
	17,  // 65: mlflow.GetExperiment.Response.experiment:type_name -> mlflow.Experiment
	10,  // 66: mlflow.CreateRun.Response.run:type_name -> mlflow.Run
	16,  // 67: mlflow.UpdateRun.Response.run_info:type_name -> mlflow.RunInfo
	10,  // 68: mlflow.GetRun.Response.run:type_name -> mlflow.Run
	10,  // 69: mlflow.SearchRuns.Response.runs:type_name -> mlflow.Run
	41,  // 70: mlflow.ListArtifacts.Response.files:type_name -> mlflow.FileInfo
	8,   // 71: mlflow.GetMetricHistory.Response.metrics:type_name -> mlflow.Metric
	43,  // 72: mlflow.GetMetricHistoryBulkInterval.Response.metrics:type_name -> mlflow.MetricWithRunId
	17,  // 73: mlflow.GetExperimentByName.Response.experiment:type_name -> mlflow.Experiment
	146, // 74: mlflow.CreateAssessment.Response.assessment:type_name -> mlflow.assessments.Assessment
	146, // 75: mlflow.UpdateAssessment.Response.assessment:type_name -> mlflow.assessments.Assessment
	55,  // 76: mlflow.StartTrace.Response.trace_info:type_name -> mlflow.TraceInfo
	55,  // 77: mlflow.EndTrace.Response.trace_info:type_name -> mlflow.TraceInfo
	55,  // 78: mlflow.GetTraceInfo.Response.trace_info:type_name -> mlflow.TraceInfo
	68,  // 79: mlflow.GetTraceInfoV3.Response.trace:type_name -> mlflow.Trace
	55,  // 80: mlflow.SearchTraces.Response.traces:type_name -> mlflow.TraceInfo
	55,  // 81: mlflow.SearchUnifiedTraces.Response.traces:type_name -> mlflow.TraceInfo
	68,  // 82: mlflow.StartTraceV3.Response.trace:type_name -> mlflow.Trace
	72,  // 83: mlflow.SearchDatasets.Response.dataset_summaries:type_name -> mlflow.DatasetSummary
	83,  // 84: mlflow.CreateLoggedModel.Response.model:type_name -> mlflow.LoggedModel
	83,  // 85: mlflow.FinalizeLoggedModel.Response.model:type_name -> mlflow.LoggedModel
	83,  // 86: mlflow.GetLoggedModel.Response.model:type_name -> mlflow.LoggedModel
	83,  // 87: mlflow.SearchLoggedModels.Response.models:type_name -> mlflow.LoggedModel
	83,  // 88: mlflow.SetLoggedModelTags.Response.model:type_name -> mlflow.LoggedModel
	41,  // 89: mlflow.ListLoggedModelArtifacts.Response.files:type_name -> mlflow.FileInfo
	70,  // 90: mlflow.SearchTracesV3Request.Response.traces:type_name -> mlflow.TraceInfoV3
	49,  // 91: mlflow.MlflowService.getExperimentByName:input_type -> mlflow.GetExperimentByName
	23,  // 92: mlflow.MlflowService.createExperiment:input_type -> mlflow.CreateExperiment
	24,  // 93: mlflow.MlflowService.searchExperiments:input_type -> mlflow.SearchExperiments
	25,  // 94: mlflow.MlflowService.getExperiment:input_type -> mlflow.GetExperiment
	26,  // 95: mlflow.MlflowService.deleteExperiment:input_type -> mlflow.DeleteExperiment
	27,  // 96: mlflow.MlflowService.restoreExperiment:input_type -> mlflow.RestoreExperiment
	28,  // 97: mlflow.MlflowService.updateExperiment:input_type -> mlflow.UpdateExperiment
	29,  // 98: mlflow.MlflowService.createRun:input_type -> mlflow.CreateRun
	30,  // 99: mlflow.MlflowService.updateRun:input_type -> mlflow.UpdateRun
	31,  // 100: mlflow.MlflowService.deleteRun:input_type -> mlflow.DeleteRun
	32,  // 101: mlflow.MlflowService.restoreRun:input_type -> mlflow.RestoreRun
	33,  // 102: mlflow.MlflowService.logMetric:input_type -> mlflow.LogMetric
	34,  // 103: mlflow.MlflowService.logParam:input_type -> mlflow.LogParam
	35,  // 104: mlflow.MlflowService.setExperimentTag:input_type -> mlflow.SetExperimentTag
	36,  // 105: mlflow.MlflowService.setTag:input_type -> mlflow.SetTag
	66,  // 106: mlflow.MlflowService.setTraceTag:input_type -> mlflow.SetTraceTag
	67,  // 107: mlflow.MlflowService.deleteTraceTag:input_type -> mlflow.DeleteTraceTag
	37,  // 108: mlflow.MlflowService.deleteTag:input_type -> mlflow.DeleteTag
	38,  // 109: mlflow.MlflowService.getRun:input_type -> mlflow.GetRun
	39,  // 110: mlflow.MlflowService.searchRuns:input_type -> mlflow.SearchRuns
	40,  // 111: mlflow.MlflowService.listArtifacts:input_type -> mlflow.ListArtifacts
	42,  // 112: mlflow.MlflowService.getMetricHistory:input_type -> mlflow.GetMetricHistory
	44,  // 113: mlflow.MlflowService.getMetricHistoryBulkInterval:input_type -> mlflow.GetMetricHistoryBulkInterval
	45,  // 114: mlflow.MlflowService.logBatch:input_type -> mlflow.LogBatch
	46,  // 115: mlflow.MlflowService.logModel:input_type -> mlflow.LogModel
	47,  // 116: mlflow.MlflowService.logInputs:input_type -> mlflow.LogInputs
	48,  // 117: mlflow.MlflowService.logOutputs:input_type -> mlflow.LogOutputs
	73,  // 118: mlflow.MlflowService.searchDatasets:input_type -> mlflow.SearchDatasets
	58,  // 119: mlflow.MlflowService.startTrace:input_type -> mlflow.StartTrace
	59,  // 120: mlflow.MlflowService.endTrace:input_type -> mlflow.EndTrace
	60,  // 121: mlflow.MlflowService.getTraceInfo:input_type -> mlflow.GetTraceInfo
	61,  // 122: mlflow.MlflowService.getTraceInfoV3:input_type -> mlflow.GetTraceInfoV3
	62,  // 123: mlflow.MlflowService.searchTraces:input_type -> mlflow.SearchTraces
	71,  // 124: mlflow.MlflowService.startTraceV3:input_type -> mlflow.StartTraceV3
	63,  // 125: mlflow.MlflowService.searchUnifiedTraceHandler:input_type -> mlflow.SearchUnifiedTraces
	64,  // 126: mlflow.MlflowService.getOnlineTraceDetails:input_type -> mlflow.GetOnlineTraceDetails
	65,  // 127: mlflow.MlflowService.deleteTraces:input_type -> mlflow.DeleteTraces
	74,  // 128: mlflow.MlflowService.createLoggedModel:input_type -> mlflow.CreateLoggedModel
	75,  // 129: mlflow.MlflowService.finalizeLoggedModel:input_type -> mlflow.FinalizeLoggedModel
	76,  // 130: mlflow.MlflowService.getLoggedModel:input_type -> mlflow.GetLoggedModel
	77,  // 131: mlflow.MlflowService.deleteLoggedModel:input_type -> mlflow.DeleteLoggedModel
	78,  // 132: mlflow.MlflowService.searchLoggedModels:input_type -> mlflow.SearchLoggedModels
	79,  // 133: mlflow.MlflowService.setLoggedModelTags:input_type -> mlflow.SetLoggedModelTags
	80,  // 134: mlflow.MlflowService.deleteLoggedModelTag:input_type -> mlflow.DeleteLoggedModelTag
	81,  // 135: mlflow.MlflowService.listLoggedModelArtifacts:input_type -> mlflow.ListLoggedModelArtifacts
	82,  // 136: mlflow.MlflowService.LogLoggedModelParams:input_type -> mlflow.LogLoggedModelParamsRequest
	52,  // 137: mlflow.MlflowService.createAssessment:input_type -> mlflow.CreateAssessment
	53,  // 138: mlflow.MlflowService.updateAssessment:input_type -> mlflow.UpdateAssessment
	54,  // 139: mlflow.MlflowService.deleteAssessment:input_type -> mlflow.DeleteAssessment
	89,  // 140: mlflow.MlflowService.SearchTracesV3:input_type -> mlflow.SearchTracesV3Request
	114, // 141: mlflow.MlflowService.getExperimentByName:output_type -> mlflow.GetExperimentByName.Response
	90,  // 142: mlflow.MlflowService.createExperiment:output_type -> mlflow.CreateExperiment.Response
	91,  // 143: mlflow.MlflowService.searchExperiments:output_type -> mlflow.SearchExperiments.Response
	92,  // 144: mlflow.MlflowService.getExperiment:output_type -> mlflow.GetExperiment.Response
	93,  // 145: mlflow.MlflowService.deleteExperiment:output_type -> mlflow.DeleteExperiment.Response
	94,  // 146: mlflow.MlflowService.restoreExperiment:output_type -> mlflow.RestoreExperiment.Response
	95,  // 147: mlflow.MlflowService.updateExperiment:output_type -> mlflow.UpdateExperiment.Response
	96,  // 148: mlflow.MlflowService.createRun:output_type -> mlflow.CreateRun.Response
	97,  // 149: mlflow.MlflowService.updateRun:output_type -> mlflow.UpdateRun.Response
	98,  // 150: mlflow.MlflowService.deleteRun:output_type -> mlflow.DeleteRun.Response
	99,  // 151: mlflow.MlflowService.restoreRun:output_type -> mlflow.RestoreRun.Response
	100, // 152: mlflow.MlflowService.logMetric:output_type -> mlflow.LogMetric.Response
	101, // 153: mlflow.MlflowService.logParam:output_type -> mlflow.LogParam.Response
	102, // 154: mlflow.MlflowService.setExperimentTag:output_type -> mlflow.SetExperimentTag.Response
	103, // 155: mlflow.MlflowService.setTag:output_type -> mlflow.SetTag.Response
	126, // 156: mlflow.MlflowService.setTraceTag:output_type -> mlflow.SetTraceTag.Response
	127, // 157: mlflow.MlflowService.deleteTraceTag:output_type -> mlflow.DeleteTraceTag.Response
	104, // 158: mlflow.MlflowService.deleteTag:output_type -> mlflow.DeleteTag.Response
	105, // 159: mlflow.MlflowService.getRun:output_type -> mlflow.GetRun.Response
	106, // 160: mlflow.MlflowService.searchRuns:output_type -> mlflow.SearchRuns.Response
	107, // 161: mlflow.MlflowService.listArtifacts:output_type -> mlflow.ListArtifacts.Response
	108, // 162: mlflow.MlflowService.getMetricHistory:output_type -> mlflow.GetMetricHistory.Response
	109, // 163: mlflow.MlflowService.getMetricHistoryBulkInterval:output_type -> mlflow.GetMetricHistoryBulkInterval.Response
	110, // 164: mlflow.MlflowService.logBatch:output_type -> mlflow.LogBatch.Response
	111, // 165: mlflow.MlflowService.logModel:output_type -> mlflow.LogModel.Response
	112, // 166: mlflow.MlflowService.logInputs:output_type -> mlflow.LogInputs.Response
	113, // 167: mlflow.MlflowService.logOutputs:output_type -> mlflow.LogOutputs.Response
	133, // 168: mlflow.MlflowService.searchDatasets:output_type -> mlflow.SearchDatasets.Response
	118, // 169: mlflow.MlflowService.startTrace:output_type -> mlflow.StartTrace.Response
	119, // 170: mlflow.MlflowService.endTrace:output_type -> mlflow.EndTrace.Response
	120, // 171: mlflow.MlflowService.getTraceInfo:output_type -> mlflow.GetTraceInfo.Response
	121, // 172: mlflow.MlflowService.getTraceInfoV3:output_type -> mlflow.GetTraceInfoV3.Response
	122, // 173: mlflow.MlflowService.searchTraces:output_type -> mlflow.SearchTraces.Response
	132, // 174: mlflow.MlflowService.startTraceV3:output_type -> mlflow.StartTraceV3.Response
	123, // 175: mlflow.MlflowService.searchUnifiedTraceHandler:output_type -> mlflow.SearchUnifiedTraces.Response
	124, // 176: mlflow.MlflowService.getOnlineTraceDetails:output_type -> mlflow.GetOnlineTraceDetails.Response
	125, // 177: mlflow.MlflowService.deleteTraces:output_type -> mlflow.DeleteTraces.Response
	134, // 178: mlflow.MlflowService.createLoggedModel:output_type -> mlflow.CreateLoggedModel.Response
	135, // 179: mlflow.MlflowService.finalizeLoggedModel:output_type -> mlflow.FinalizeLoggedModel.Response
	136, // 180: mlflow.MlflowService.getLoggedModel:output_type -> mlflow.GetLoggedModel.Response
	137, // 181: mlflow.MlflowService.deleteLoggedModel:output_type -> mlflow.DeleteLoggedModel.Response
	140, // 182: mlflow.MlflowService.searchLoggedModels:output_type -> mlflow.SearchLoggedModels.Response
	141, // 183: mlflow.MlflowService.setLoggedModelTags:output_type -> mlflow.SetLoggedModelTags.Response
	142, // 184: mlflow.MlflowService.deleteLoggedModelTag:output_type -> mlflow.DeleteLoggedModelTag.Response
	143, // 185: mlflow.MlflowService.listLoggedModelArtifacts:output_type -> mlflow.ListLoggedModelArtifacts.Response
	144, // 186: mlflow.MlflowService.LogLoggedModelParams:output_type -> mlflow.LogLoggedModelParamsRequest.Response
	115, // 187: mlflow.MlflowService.createAssessment:output_type -> mlflow.CreateAssessment.Response
	116, // 188: mlflow.MlflowService.updateAssessment:output_type -> mlflow.UpdateAssessment.Response
	117, // 189: mlflow.MlflowService.deleteAssessment:output_type -> mlflow.DeleteAssessment.Response
	145, // 190: mlflow.MlflowService.SearchTracesV3:output_type -> mlflow.SearchTracesV3Request.Response
	141, // [141:191] is the sub-list for method output_type
	91,  // [91:141] is the sub-list for method input_type
	91,  // [91:91] is the sub-list for extension type_name
	91,  // [91:91] is the sub-list for extension extendee
	0,   // [0:91] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	file_databricks_proto_init()
	file_assessments_proto_init()
	file_service_proto_msgTypes[61].OneofWrappers = []any{
		(*TraceLocation_MlflowExperiment)(nil),
		(*TraceLocation_InferenceTable)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   138,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
		EnumInfos:         file_service_proto_enumTypes,
		MessageInfos:      file_service_proto_msgTypes,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}
